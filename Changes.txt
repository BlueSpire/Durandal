2.0.1
-Fix Issue #259: Fragment doesn't include query when using push state
-Fix Issue #258: Absolute links not working when using push state
-Fix Issue #254: Bad mainConfigFile entry in the default weyland-config of the Durandal nuget package
-Fix Issue #267: Added missing generic type arguments in the Durandal.d.ts file
-Fix Issue #265: Undefined reference error when trying to remove the previous view binding instruction from the dom, which doesn't exist.
-Fix Issue #261: Improving the Mimosa starter kit by adding bower support for font awesome and durandal
-Fix Issue #271: observable.defineProperty overwrites ko
-Fix Issue #272: Add a condition on the target attribute so that when pushState is activated, there is a way to bypass the router.
-Fix Issue #275: The close declaration in Durandal's TypeScript d.ts file would not allow for passing result parameters. Fixed by adding a rest argument called results.
-Fix Issue #255: router.activate Promise never resolves with 'silent' activation
-Fix Issue #278: Fixed Route Not Found error in IE11 Preview
-Fix Issue #279: Binding handlers added through composition.addBindingHandler don't work outside of a composition
-Fix Issue #266: composition.bindAndShow overwrites the elements local display style
-Fix Issue #268: TS Definition file Error - Exported variable 'router' has or is using or is using private type 'durandal/typescript.rootRouter'
-Fix Issue #264: TS Definition missing activeInstruction().config.route
-Fix Issue #281: Infinite Loop Navigation
-Fix Issue #292: Correctly position dialog in more scnenarios
-Fix Issue #266: Router 2.0 fails to render views when cacheViews is not defined
-Fix Issue #305: Navigating from one view to another hangs the application.
-Fix Issue #310: Router Swallows errors from activate() promise
-Fix Issue #319: dialog:autofocus was being called on last instead of first tagged element
-Fix Issue #316: a Widget with no "parts" results in an exception being thrown
-Fix Issue #309: Improvements for property DurandalRouteConfiguration.nav and more consistent router ordering.
-Fix Issue #324: fix binder-spec to address beforeBind/afterBind renaming to binding/bind...
-Fix Issue #334: add events tests
-Fix Issue #323: Unit test errors on OSX
-Fix Issue #333: Changed entrance animations callbacks from complete to always
-Fix Issue #331: compositioncomplete does not get triggered
-Fix Issue #330: router canReuseCurrentActivation() function is not quite right
-Fix Issue #307: Router handling of null/undefined href is possibly reversed?
-Fix Issue #303: Multiple route are active when are base on single viewmodel
-Fix Issue #304: Heap Size growing, DOM element detached
-Fix Issue #256: [data-part]'s nested in [data-bind] elements get removed from childParts in widgets
-Fix Issue #284: Publish 1.X Docs Publicly
-Fix Issue #317: Put Samples Online
-Fix Issue #308: dialog isn't positioned correctly when is set composition.defaultTransitionName
-Fix Issue #338: Old custom almond script used
-Fix Issue #341: pushState href="" (empty string) not recognized as internal navigation
-Fix Issue #339: exceptions thrown in compositionComplete callbacks prevent other callbacks to run. (other callback may need handling as well.)
-Fix Issue #342: logical `if` flow bug in observable.js -> innerSetter
-Fix Issue #351: TypeError when redirecting to currently loaded view
-Improved ordering of compositionComplete callbacks.
-Some perf improvements in the composition engine.
-Don't include a trailing slash on the root when the router navigates.
-Fixing an improper node removal in one execution path of composition relating to rebinding views.
-Tweaking the .NET Index.cshtml so that it plays nicer when using the router in push state mode.

2.0.0
-Massive reorganization of the github repo. The reorg was done to cleanly separate the library, samples and starter kit source from the platform targets and to facilitate a cleaner build process with less manual "fixup" as the list of supported platforms expands.
-Durandal now expects to live along side 3rd party script libraries, outside of your application code. All samples and starter kits have been updated to use requirejs.path to setup the correct mapping, per platform. Additionally, the framework no longer assumes that plugins or transitions are under the durandal folder. The starter kits all use requirejs.path to map them to their actual location.
-Durandal no longer has any dependencies on globally defined variables. It now requires everything through the module system. This means that jQuery and Knockout must be defined in order for Durandal to function properly. The samples/starter kits all set up the proper configuration to make this happen. This allows you to keep ko/jquery in global scope by using an explicit define call, giving you the same expereience as 1.x or you can now use require.paths and shim config to keep everything out of the gloabl scope if you desire.
-There is now an official plugin model which should be configured before calling app.start. This allows plugins to load in, adding binding handlers and extending durandal APIs before your application code runs. You can pass configuration to the plugins as part of this process. Once the plugin model was in place we moved several libraries out of the core and into plugins. These include: dialog (formerly modalDialog), widget and http. Additional plugins shipping with Durandal 2.0 include: router, history, serializer and observable. Plugins which should be directly installed with the new plugin system include: router, dialog, widget and observable (optionally).
-The modalDialog module was renamed to "dialog" and changed to a plugin. The messageBox module's source and view are now part of the dialog module. Formerly, showing a modal added a "modal" property on to the shown module which could be used to close the modal and return a value. This is no longer the case. Closing and returning a value should now be done with dialog.close(viewModel, returnValue). If you need to customize the MessageBox, you can access it via dialog.MessageBox. It's view now uses text bindings instead of html bindings for better security. The dialog's default context has also been updated to take advantage of the new compositionComplete event so that sizing/positioning of the dialog occurs after all internal compositions are complete. This means that new dialog contexts should have addHost, removeHost and compositionComplete callbacks. The compositionComplete callbacks receives the view, parent view and composition context as arguments.
-The viewModelBinder was renamed to binder.
-The router has been completely re-written. It no longer has any dependencies outside of Durandal's core dependencies. (No more SammyJS) The router is built on top of a new history module which encapsulates the low-level history manipulation. This was done so that developers who have unique routing requirements can dispense with Durandal's router but not have to also re-write the history portion of the system. The new router adds a new router binding handler, child routers, better deep linking support, many bug fixes, support for not only parameterized routes, but also splats, optional parameters and query strings. It also has a better mechanism for handling unknown routes, default routes and conventional routing. The router also publishes events related to its activity and sports a simple, fluent configuration interface.
-The viewModel module was renamed to "activator" and its activator function was renamed to "create". Passing an array as activationData now results in activate being called with one argument for each array element. The areItemsSame settings callback now has four parameters: currentItem, newItem, currentActivationData, newActivationData.
-The viewEngine had some refactoring to expose parseMarkup and processMarkup. We also added ensureSingleElement and createFallbackView.
-New composition lifecycle. Without an activator: activate, binding (renamed from beforeBind), bindingComplete (renamed from afterBind), attached (renamed from viewAttached), compositionComplete, detached. With an activator: canActivate, activate, binding, bindingComplete, attached, compositionComplete, canDeactivate, deactivate, detached. The compositionComplete event fires after the entire composition that the current view model is a part of is completely finished and all nodes are in the document. This event bubbles, starting by notifying child view models first, then parents. The detached event fires whenever the module's corresponding view is removed from the DOM. Composition now supports inline views by setting mode:'inline' on the binding and supplying the view as a child element. Composition now supports templated parts by setting mode:'templated' and supplying the part overrides as child elements. Composition now supports activationData which will be passed to the module's activate function. Composition now has a new function called addBindingHandler. This allows you to create a standard knockout binding handler whose execution is delayed until the composition.current.complete event is fired. The binding callback on a VM can now return false, to cancel the applyBindings call. It can also return an object with a property called applyBindings to control this. Furthermore, the object that is returned from the binding callback is passed along to the beforeBind and afterBind hooks of the view model binder to allow plugins access to this information. Returning a promise from activate is no longer necessary. You can return one to halt binding and screen composition, but no longer need to.
-Fixed bug with widget part overrides that contain widgets with part overrides. Easier mapping of widgets via new widget apis: mapKindToModuleId/convertKindToModulePath and mapKindToViewId/convertKindToViewPath. Widgets are now almost entirely built on composition so the standard composition lifecycle applies. Widgets are now composed of a view.html and a viewmodel.js (not controller.js). Settings are no longer passed to the constructor, but into the activate fuction.
-New system module helper apis: resolveObject (can be used in TypeScript to return the viewmodel out of a module), assert, error, extend, wait, isElement, isArray, isObject, isBoolean, isArguments, isFunction, isString, isNumber, isDate and isRexExp. The acquire function's promise now correctly reports load errors through the standard promise error mechanism. Previously when passing multiple module ids to system.aqcuire, the promise would resolve with one argument per module. However, this causes problems when used with non-jQuery promises. As a result the acquire function was reworked so that if an array of ids is passed or
multiple ids are passed then the promise resolves with an array of modules. system.error is plumbed throughout the framework to surface real errors as opposed to simple logs.
-Added "fadeOnly" option to the entrance transition. Removing some bogus styles after the transition completes.
-Removed app.adaptToDevice()...which was causing lots of confusion.
-Removed the optimizer. It is now replaced by Weyland.
-New samples and starter kits available for: raw HTML, Bower, .NET (Nuget and VSIX), and Mimosa.
-Added support for Bower
-Added more knockout samples
-Better support for Q integration
-Added api docs via YUIDoc
-Lots of bug fixes
-Updated docs and conversion guide
-Official TypeScript definition file

1.2.0

-Fixed bugs in .NET's optimizer. Added a 'loader' options to specify 'almond' or 'require'.
-Prevent popping when transitioning with the 'entrance' transition.
-Passing activation data through the puggable beforeActivate function of the activator.
-Added throwOnErrors to the view model binder. Errors will be thrown instead of logged when true.
-Major fix in widgets which prevented proper databinding and broken/excessive rendering.
-Improved settings construction for composition and widget binding handlers.
-Upped the starting z index for modals to play better with bootstrap.
-Added beforeBind and afterBind hooks to the view model binder.
-Fixed the .NET optimizer config file generation for the 'require' loader option.
-View engine now removes empty text nodes when parsing views.
-Fixed a bug in the router which cuased non-hashed routes to malfunction.
-Added a guardRoute hook to the router to allow, deny or redirect based on the route.
-Fixed bugs in the implementation of app.adaptToDevice
-Added a missing call to the deferred's promise() function in the view model module which caused issues with Q.
-Made all the Durandal samples into a single app.
-Switched Durandal over to dependency array module syntax to enable easier use with other AMD loaders.
-Added hooks for the Dojo AMD loader.
-Router navigateTo is only used for defined routes now.
-Updated the .NET command line parser dependency to the latest version and fixed breaking changes.
-Enabled modal dialogs to return multiple values to a promise.
-Implemented route queuing for the router.
-More unit tests added.
-Fixed some invalid html generation in the view engine.
-Styled the widget demo.
-Fixed transitions so that they run even if there is no new child. 
-Router now uses route.caption for document title.
-Router navigateTo now accepts a second parameter of 'skip' to skip the route handler or 'replace' to replace the url.
-Removed the app module's startup dependency on the message box module.
-Removed the setView hook that the view model binder called. Replaced it with beforeBind and afterBind hooks.