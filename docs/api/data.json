{
    "project": {
        "name": "Durandal API",
        "description": "Durandal is a cross-device, cross-platform client framework written in JavaScript and designed to make Single Page Applications (SPAs) easy to create and maintain.",
        "version": "2.2.0",
        "url": "http://durandaljs.com/"
    },
    "files": {
        "src\\durandal\\js\\activator.js": {
            "name": "src\\durandal\\js\\activator.js",
            "modules": {
                "activator": 1
            },
            "classes": {
                "Activator": 1,
                "ActivatorSettings": 1,
                "ActivatorModule": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\durandal\\js\\app.js": {
            "name": "src\\durandal\\js\\app.js",
            "modules": {
                "app": 1
            },
            "classes": {
                "AppModule": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\durandal\\js\\binder.js": {
            "name": "src\\durandal\\js\\binder.js",
            "modules": {
                "binder": 1
            },
            "classes": {
                "BinderModule": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\durandal\\js\\composition.js": {
            "name": "src\\durandal\\js\\composition.js",
            "modules": {
                "composition": 1
            },
            "classes": {
                "CompositionTransaction": 1,
                "CompositionModule": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\durandal\\js\\events.js": {
            "name": "src\\durandal\\js\\events.js",
            "modules": {
                "events": 1
            },
            "classes": {
                "Subscription": 1,
                "Events": 1,
                "EventsModule": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\durandal\\js\\system.js": {
            "name": "src\\durandal\\js\\system.js",
            "modules": {
                "system": 1
            },
            "classes": {
                "SystemModule": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\durandal\\js\\viewEngine.js": {
            "name": "src\\durandal\\js\\viewEngine.js",
            "modules": {
                "viewEngine": 1
            },
            "classes": {
                "ViewEngineModule": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\durandal\\js\\viewLocator.js": {
            "name": "src\\durandal\\js\\viewLocator.js",
            "modules": {
                "viewLocator": 1
            },
            "classes": {
                "ViewLocatorModule": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\plugins\\js\\dialog.js": {
            "name": "src\\plugins\\js\\dialog.js",
            "modules": {
                "dialog": 1
            },
            "classes": {
                "MessageBox": 1,
                "DialogModule": 1,
                "DialogContext": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\plugins\\js\\history.js": {
            "name": "src\\plugins\\js\\history.js",
            "modules": {
                "history": 1
            },
            "classes": {
                "HistoryModule": 1,
                "HistoryOptions": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\plugins\\js\\http.js": {
            "name": "src\\plugins\\js\\http.js",
            "modules": {
                "http": 1
            },
            "classes": {
                "HTTPModule": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\plugins\\js\\observable.js": {
            "name": "src\\plugins\\js\\observable.js",
            "modules": {
                "observable": 1
            },
            "classes": {
                "ObservableModule": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\plugins\\js\\router.js": {
            "name": "src\\plugins\\js\\router.js",
            "modules": {
                "router": 1
            },
            "classes": {
                "Router": 1,
                "RouterModule": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\plugins\\js\\serializer.js": {
            "name": "src\\plugins\\js\\serializer.js",
            "modules": {
                "serializer": 1
            },
            "classes": {
                "SerializerModule": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\plugins\\js\\widget.js": {
            "name": "src\\plugins\\js\\widget.js",
            "modules": {
                "widget": 1
            },
            "classes": {
                "WidgetModule": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\transitions\\js\\entrance.js": {
            "name": "src\\transitions\\js\\entrance.js",
            "modules": {
                "entrance": 1
            },
            "classes": {
                "EntranceModule": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "activator": {
            "name": "activator",
            "submodules": {},
            "elements": {},
            "classes": {
                "Activator": 1,
                "ActivatorSettings": 1,
                "ActivatorModule": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\durandal\\js\\activator.js",
            "line": 622,
            "description": "The activator module encapsulates all logic related to screen/component activation.\nAn activator is essentially an asynchronous state machine that understands a particular state transition protocol.\nThe protocol ensures that the following series of events always occur: `canDeactivate` (previous state), `canActivate` (new state), `deactivate` (previous state), `activate` (new state).\nEach of the _can_ callbacks may return a boolean, affirmative value or promise for one of those. If either of the _can_ functions yields a false result, then activation halts.",
            "requires": [
                "system",
                "knockout"
            ]
        },
        "app": {
            "name": "app",
            "submodules": {},
            "elements": {},
            "classes": {
                "AppModule": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\durandal\\js\\app.js",
            "line": 46,
            "description": "The app module controls app startup, plugin loading/configuration and root visual display.",
            "requires": [
                "system",
                "viewEngine",
                "composition",
                "events",
                "jquery"
            ]
        },
        "binder": {
            "name": "binder",
            "submodules": {},
            "elements": {},
            "classes": {
                "BinderModule": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\durandal\\js\\binder.js",
            "line": 86,
            "description": "The binder joins an object instance and a DOM element tree by applying databinding and/or invoking binding lifecycle callbacks (binding and bindingComplete).",
            "requires": [
                "system",
                "knockout"
            ]
        },
        "composition": {
            "name": "composition",
            "submodules": {},
            "elements": {},
            "classes": {
                "CompositionTransaction": 1,
                "CompositionModule": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\durandal\\js\\composition.js",
            "line": 274,
            "description": "The composition module encapsulates all functionality related to visual composition.",
            "requires": [
                "system",
                "viewLocator",
                "binder",
                "viewEngine",
                "activator",
                "jquery",
                "knockout"
            ]
        },
        "events": {
            "name": "events",
            "submodules": {},
            "elements": {},
            "classes": {
                "Subscription": 1,
                "Events": 1,
                "EventsModule": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\durandal\\js\\events.js",
            "line": 192,
            "description": "Durandal events originate from backbone.js but also combine some ideas from signals.js as well as some additional improvements.\nEvents can be installed into any object and are installed into the `app` module by default for convenient app-wide eventing.",
            "requires": [
                "system"
            ]
        },
        "system": {
            "name": "system",
            "submodules": {},
            "elements": {},
            "classes": {
                "SystemModule": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\durandal\\js\\system.js",
            "line": 116,
            "description": "The system module encapsulates the most basic features used by other modules.",
            "requires": [
                "require",
                "jquery"
            ]
        },
        "viewEngine": {
            "name": "viewEngine",
            "submodules": {},
            "elements": {},
            "classes": {
                "ViewEngineModule": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\durandal\\js\\viewEngine.js",
            "line": 20,
            "description": "The viewEngine module provides information to the viewLocator module which is used to locate the view's source file. The viewEngine also transforms a view id into a view instance.",
            "requires": [
                "system",
                "jquery"
            ]
        },
        "viewLocator": {
            "name": "viewLocator",
            "submodules": {},
            "elements": {},
            "classes": {
                "ViewLocatorModule": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\durandal\\js\\viewLocator.js",
            "line": 22,
            "description": "The viewLocator module collaborates with the viewEngine module to provide views (literally dom sub-trees) to other parts of the framework as needed. The primary consumer of the viewLocator is the composition module.",
            "requires": [
                "system",
                "viewEngine"
            ]
        },
        "dialog": {
            "name": "dialog",
            "submodules": {},
            "elements": {},
            "classes": {
                "MessageBox": 1,
                "DialogModule": 1,
                "DialogContext": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\plugins\\js\\dialog.js",
            "line": 405,
            "description": "The dialog module enables the display of message boxes, custom modal dialogs and other overlays or slide-out UI abstractions. Dialogs are constructed by the composition system which interacts with a user defined dialog context. The dialog module enforced the activator lifecycle.",
            "requires": [
                "system",
                "app",
                "composition",
                "activator",
                "viewEngine",
                "jquery",
                "knockout"
            ]
        },
        "history": {
            "name": "history",
            "submodules": {},
            "elements": {},
            "classes": {
                "HistoryModule": 1,
                "HistoryOptions": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\plugins\\js\\history.js",
            "line": 293,
            "description": "This module is based on Backbone's core history support. It abstracts away the low level details of working with browser history and url changes in order to provide a solid foundation for a router.",
            "requires": [
                "system",
                "jquery"
            ]
        },
        "http": {
            "name": "http",
            "submodules": {},
            "elements": {},
            "classes": {
                "HTTPModule": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\plugins\\js\\http.js",
            "line": 8,
            "description": "Enables common http request scenarios.",
            "requires": [
                "jquery",
                "knockout"
            ]
        },
        "observable": {
            "name": "observable",
            "submodules": {},
            "elements": {},
            "classes": {
                "ObservableModule": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\plugins\\js\\observable.js",
            "line": 23,
            "description": "Enables automatic observability of plain javascript object for ES5 compatible browsers. Also, converts promise properties into observables that are updated when the promise resolves.",
            "requires": [
                "system",
                "binder",
                "knockout"
            ]
        },
        "router": {
            "name": "router",
            "submodules": {},
            "elements": {},
            "classes": {
                "Router": 1,
                "RouterModule": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\plugins\\js\\router.js",
            "line": 996,
            "description": "Connects the history module's url and history tracking support to Durandal's activation and composition engine allowing you to easily build navigation-style applications.",
            "requires": [
                "system",
                "app",
                "activator",
                "events",
                "composition",
                "history",
                "knockout",
                "jquery"
            ]
        },
        "serializer": {
            "name": "serializer",
            "submodules": {},
            "elements": {},
            "classes": {
                "SerializerModule": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\plugins\\js\\serializer.js",
            "line": 7,
            "description": "Serializes and deserializes data to/from JSON.",
            "requires": [
                "system"
            ]
        },
        "widget": {
            "name": "widget",
            "submodules": {},
            "elements": {},
            "classes": {
                "WidgetModule": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\plugins\\js\\widget.js",
            "line": 30,
            "description": "Layers the widget sugar on top of the composition system.",
            "requires": [
                "system",
                "composition",
                "jquery",
                "knockout"
            ]
        },
        "entrance": {
            "name": "entrance",
            "submodules": {},
            "elements": {},
            "classes": {
                "EntranceModule": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\transitions\\js\\entrance.js",
            "line": 57,
            "description": "The entrance transition module.",
            "requires": [
                "system",
                "composition",
                "jquery"
            ]
        }
    },
    "classes": {
        "Activator": {
            "name": "Activator",
            "shortname": "Activator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "activator",
            "namespace": "",
            "file": "src\\durandal\\js\\activator.js",
            "line": 220,
            "description": "An activator is a read/write computed observable that enforces the activation lifecycle whenever changing values."
        },
        "ActivatorSettings": {
            "name": "ActivatorSettings",
            "shortname": "ActivatorSettings",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "activator",
            "namespace": "",
            "file": "src\\durandal\\js\\activator.js",
            "line": 551,
            "static": 1
        },
        "ActivatorModule": {
            "name": "ActivatorModule",
            "shortname": "ActivatorModule",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "activator",
            "namespace": "",
            "file": "src\\durandal\\js\\activator.js",
            "line": 622,
            "static": 1
        },
        "AppModule": {
            "name": "AppModule",
            "shortname": "AppModule",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "app",
            "namespace": "",
            "file": "src\\durandal\\js\\app.js",
            "line": 46,
            "static": 1,
            "uses": [
                "Events"
            ]
        },
        "BinderModule": {
            "name": "BinderModule",
            "shortname": "BinderModule",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "binder",
            "namespace": "",
            "file": "src\\durandal\\js\\binder.js",
            "line": 86,
            "static": 1
        },
        "CompositionTransaction": {
            "name": "CompositionTransaction",
            "shortname": "CompositionTransaction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "composition",
            "namespace": "",
            "file": "src\\durandal\\js\\composition.js",
            "line": 259,
            "static": 1
        },
        "CompositionModule": {
            "name": "CompositionModule",
            "shortname": "CompositionModule",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "composition",
            "namespace": "",
            "file": "src\\durandal\\js\\composition.js",
            "line": 274,
            "static": 1
        },
        "Subscription": {
            "name": "Subscription",
            "shortname": "Subscription",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "events",
            "namespace": "",
            "file": "src\\durandal\\js\\events.js",
            "line": 11,
            "description": "Represents an event subscription."
        },
        "Events": {
            "name": "Events",
            "shortname": "Events",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "AppModule",
                "Router"
            ],
            "module": "events",
            "namespace": "",
            "file": "src\\durandal\\js\\events.js",
            "line": 58,
            "description": "Creates an object with eventing capabilities."
        },
        "EventsModule": {
            "name": "EventsModule",
            "shortname": "EventsModule",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "events",
            "namespace": "",
            "file": "src\\durandal\\js\\events.js",
            "line": 192,
            "description": "Creates an object with eventing capabilities.",
            "static": 1
        },
        "SystemModule": {
            "name": "SystemModule",
            "shortname": "SystemModule",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "system",
            "namespace": "",
            "file": "src\\durandal\\js\\system.js",
            "line": 116,
            "static": 1
        },
        "ViewEngineModule": {
            "name": "ViewEngineModule",
            "shortname": "ViewEngineModule",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "viewEngine",
            "namespace": "",
            "file": "src\\durandal\\js\\viewEngine.js",
            "line": 20,
            "static": 1
        },
        "ViewLocatorModule": {
            "name": "ViewLocatorModule",
            "shortname": "ViewLocatorModule",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "viewLocator",
            "namespace": "",
            "file": "src\\durandal\\js\\viewLocator.js",
            "line": 22,
            "static": 1
        },
        "MessageBox": {
            "name": "MessageBox",
            "shortname": "MessageBox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "dialog",
            "namespace": "",
            "file": "src\\plugins\\js\\dialog.js",
            "line": 17,
            "description": "Models a message box's message, title and options."
        },
        "DialogModule": {
            "name": "DialogModule",
            "shortname": "DialogModule",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "dialog",
            "namespace": "",
            "file": "src\\plugins\\js\\dialog.js",
            "line": 192,
            "static": 1
        },
        "DialogContext": {
            "name": "DialogContext",
            "shortname": "DialogContext",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "dialog",
            "namespace": "",
            "file": "src\\plugins\\js\\dialog.js",
            "line": 405
        },
        "HistoryModule": {
            "name": "HistoryModule",
            "shortname": "HistoryModule",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "history",
            "namespace": "",
            "file": "src\\plugins\\js\\history.js",
            "line": 37,
            "static": 1
        },
        "HistoryOptions": {
            "name": "HistoryOptions",
            "shortname": "HistoryOptions",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "history",
            "namespace": "",
            "file": "src\\plugins\\js\\history.js",
            "line": 293,
            "static": 1
        },
        "HTTPModule": {
            "name": "HTTPModule",
            "shortname": "HTTPModule",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "http",
            "namespace": "",
            "file": "src\\plugins\\js\\http.js",
            "line": 8,
            "static": 1
        },
        "ObservableModule": {
            "name": "ObservableModule",
            "shortname": "ObservableModule",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "observable",
            "namespace": "",
            "file": "src\\plugins\\js\\observable.js",
            "line": 23,
            "description": "You can call observable(obj, propertyName) to get the observable function for the specified property on the object."
        },
        "Router": {
            "name": "Router",
            "shortname": "Router",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "router",
            "namespace": "",
            "file": "src\\plugins\\js\\router.js",
            "line": 70,
            "uses": [
                "Events"
            ]
        },
        "RouterModule": {
            "name": "RouterModule",
            "shortname": "RouterModule",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "router",
            "namespace": "",
            "file": "src\\plugins\\js\\router.js",
            "line": 996,
            "extends": "Router",
            "static": 1
        },
        "SerializerModule": {
            "name": "SerializerModule",
            "shortname": "SerializerModule",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "serializer",
            "namespace": "",
            "file": "src\\plugins\\js\\serializer.js",
            "line": 7,
            "static": 1
        },
        "WidgetModule": {
            "name": "WidgetModule",
            "shortname": "WidgetModule",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "widget",
            "namespace": "",
            "file": "src\\plugins\\js\\widget.js",
            "line": 30,
            "static": 1
        },
        "EntranceModule": {
            "name": "EntranceModule",
            "shortname": "EntranceModule",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entrance",
            "namespace": "",
            "file": "src\\transitions\\js\\entrance.js",
            "line": 57,
            "is_constructor": 1
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src\\durandal\\js\\activator.js",
            "line": 242,
            "description": "The settings for this activator.",
            "itemtype": "property",
            "name": "settings",
            "type": "ActivatorSettings",
            "class": "Activator",
            "module": "activator"
        },
        {
            "file": "src\\durandal\\js\\activator.js",
            "line": 249,
            "description": "An observable which indicates whether or not the activator is currently in the process of activating an instance.",
            "itemtype": "method",
            "name": "isActivating",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Activator",
            "module": "activator"
        },
        {
            "file": "src\\durandal\\js\\activator.js",
            "line": 260,
            "description": "Determines whether or not the specified item can be deactivated.",
            "itemtype": "method",
            "name": "canDeactivateItem",
            "params": [
                {
                    "name": "item",
                    "description": "The item to check.",
                    "type": "Object"
                },
                {
                    "name": "close",
                    "description": "Whether or not to check if close is possible.",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "Options for controlling the activation process.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Activator",
            "module": "activator"
        },
        {
            "file": "src\\durandal\\js\\activator.js",
            "line": 272,
            "description": "Deactivates the specified item.",
            "itemtype": "method",
            "name": "deactivateItem",
            "params": [
                {
                    "name": "item",
                    "description": "The item to deactivate.",
                    "type": "Object"
                },
                {
                    "name": "close",
                    "description": "Whether or not to close the item.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Activator",
            "module": "activator"
        },
        {
            "file": "src\\durandal\\js\\activator.js",
            "line": 292,
            "description": "Determines whether or not the specified item can be activated.",
            "itemtype": "method",
            "name": "canActivateItem",
            "params": [
                {
                    "name": "item",
                    "description": "The item to check.",
                    "type": "Object"
                },
                {
                    "name": "activationData",
                    "description": "Data associated with the activation.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Activator",
            "module": "activator"
        },
        {
            "file": "src\\durandal\\js\\activator.js",
            "line": 303,
            "description": "Activates the specified item.",
            "itemtype": "method",
            "name": "activateItem",
            "params": [
                {
                    "name": "newItem",
                    "description": "The item to activate.",
                    "type": "Object"
                },
                {
                    "name": "newActivationData",
                    "description": "Data associated with the activation.",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "Options for controlling the activation process.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Activator",
            "module": "activator"
        },
        {
            "file": "src\\durandal\\js\\activator.js",
            "line": 365,
            "description": "Determines whether or not the activator, in its current state, can be activated.",
            "itemtype": "method",
            "name": "canActivate",
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Activator",
            "module": "activator"
        },
        {
            "file": "src\\durandal\\js\\activator.js",
            "line": 383,
            "description": "Activates the activator, in its current state.",
            "itemtype": "method",
            "name": "activate",
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Activator",
            "module": "activator"
        },
        {
            "file": "src\\durandal\\js\\activator.js",
            "line": 401,
            "description": "Determines whether or not the activator, in its current state, can be deactivated.",
            "itemtype": "method",
            "name": "canDeactivate",
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Activator",
            "module": "activator"
        },
        {
            "file": "src\\durandal\\js\\activator.js",
            "line": 410,
            "description": "Deactivates the activator, in its current state.",
            "itemtype": "method",
            "name": "deactivate",
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Activator",
            "module": "activator"
        },
        {
            "file": "src\\durandal\\js\\activator.js",
            "line": 556,
            "description": "The default value passed to an object's deactivate function as its close parameter.",
            "itemtype": "property",
            "name": "closeOnDeactivate",
            "type": "Boolean",
            "default": "true",
            "class": "ActivatorSettings",
            "module": "activator"
        },
        {
            "file": "src\\durandal\\js\\activator.js",
            "line": 562,
            "description": "Lower-cased words which represent a truthy value.",
            "itemtype": "property",
            "name": "affirmations",
            "type": "String[]",
            "default": "['yes', 'ok', 'true']",
            "class": "ActivatorSettings",
            "module": "activator"
        },
        {
            "file": "src\\durandal\\js\\activator.js",
            "line": 568,
            "description": "Interprets the response of a `canActivate` or `canDeactivate` call using the known affirmative values in the `affirmations` array.",
            "itemtype": "method",
            "name": "interpretResponse",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "ActivatorSettings",
            "module": "activator"
        },
        {
            "file": "src\\durandal\\js\\activator.js",
            "line": 585,
            "description": "Determines whether or not the current item and the new item are the same.",
            "itemtype": "method",
            "name": "areSameItem",
            "params": [
                {
                    "name": "currentItem",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "newItem",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "currentActivationData",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "newActivationData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "ActivatorSettings",
            "module": "activator"
        },
        {
            "file": "src\\durandal\\js\\activator.js",
            "line": 597,
            "description": "Called immediately before the new item is activated.",
            "itemtype": "method",
            "name": "beforeActivate",
            "params": [
                {
                    "name": "newItem",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ActivatorSettings",
            "module": "activator"
        },
        {
            "file": "src\\durandal\\js\\activator.js",
            "line": 605,
            "description": "Called immediately after the old item is deactivated.",
            "itemtype": "method",
            "name": "afterDeactivate",
            "params": [
                {
                    "name": "oldItem",
                    "description": "The previous item.",
                    "type": "Object"
                },
                {
                    "name": "close",
                    "description": "Whether or not the previous item was closed.",
                    "type": "Boolean"
                },
                {
                    "name": "setter",
                    "description": "The activate item setter function.",
                    "type": "Function"
                }
            ],
            "class": "ActivatorSettings",
            "module": "activator"
        },
        {
            "file": "src\\durandal\\js\\activator.js",
            "line": 627,
            "description": "The default settings used by activators.",
            "itemtype": "property",
            "name": "defaults",
            "type": "ActivatorSettings",
            "class": "ActivatorModule",
            "module": "activator"
        },
        {
            "file": "src\\durandal\\js\\activator.js",
            "line": 632,
            "description": "Creates a new activator.",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "initialActiveItem",
                    "description": "The item which should be immediately activated upon creation of the ativator.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "settings",
                    "description": "Per activator overrides of the default activator settings.",
                    "type": "ActivatorSettings",
                    "optional": true
                }
            ],
            "return": {
                "description": "The created activator.",
                "type": "Activator"
            },
            "class": "ActivatorModule",
            "module": "activator"
        },
        {
            "file": "src\\durandal\\js\\activator.js",
            "line": 640,
            "description": "Determines whether or not the provided object is an activator or not.",
            "itemtype": "method",
            "name": "isActivator",
            "params": [
                {
                    "name": "object",
                    "description": "Any object you wish to verify as an activator or not.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if the object is an activator; false otherwise.",
                "type": "Boolean"
            },
            "class": "ActivatorModule",
            "module": "activator"
        },
        {
            "file": "src\\durandal\\js\\app.js",
            "line": 52,
            "description": "The title of your application.",
            "itemtype": "property",
            "name": "title",
            "type": "String",
            "class": "AppModule",
            "module": "app"
        },
        {
            "file": "src\\durandal\\js\\app.js",
            "line": 57,
            "description": "Configures one or more plugins to be loaded and installed into the application.",
            "itemtype": "method",
            "name": "configurePlugins",
            "params": [
                {
                    "name": "config",
                    "description": "Keys are plugin names. Values can be truthy, to simply install the plugin, or a configuration object to pass to the plugin.",
                    "type": "Object"
                },
                {
                    "name": "baseUrl",
                    "description": "The base url to load the plugins from.",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "AppModule",
            "module": "app"
        },
        {
            "file": "src\\durandal\\js\\app.js",
            "line": 77,
            "description": "Starts the application.",
            "itemtype": "method",
            "name": "start",
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "AppModule",
            "module": "app"
        },
        {
            "file": "src\\durandal\\js\\app.js",
            "line": 98,
            "description": "Sets the root module/view for the application.",
            "itemtype": "method",
            "name": "setRoot",
            "params": [
                {
                    "name": "root",
                    "description": "The root view or module.",
                    "type": "String"
                },
                {
                    "name": "transition",
                    "description": "The transition to use from the previous root (or splash screen) into the new root.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "applicationHost",
                    "description": "The application host element or id. By default the id 'applicationHost' will be used.",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "AppModule",
            "module": "app"
        },
        {
            "file": "src\\durandal\\js\\binder.js",
            "line": 91,
            "description": "Called before every binding operation. Does nothing by default.",
            "itemtype": "method",
            "name": "binding",
            "params": [
                {
                    "name": "data",
                    "description": "The data that is about to be bound.",
                    "type": "Object"
                },
                {
                    "name": "view",
                    "description": "The view that is about to be bound.",
                    "type": "DOMElement"
                },
                {
                    "name": "instruction",
                    "description": "The object that carries the binding instructions.",
                    "type": "Object"
                }
            ],
            "class": "BinderModule",
            "module": "binder"
        },
        {
            "file": "src\\durandal\\js\\binder.js",
            "line": 99,
            "description": "Called after every binding operation. Does nothing by default.",
            "itemtype": "method",
            "name": "bindingComplete",
            "params": [
                {
                    "name": "data",
                    "description": "The data that has just been bound.",
                    "type": "Object"
                },
                {
                    "name": "view",
                    "description": "The view that has just been bound.",
                    "type": "DOMElement"
                },
                {
                    "name": "instruction",
                    "description": "The object that carries the binding instructions.",
                    "type": "Object"
                }
            ],
            "class": "BinderModule",
            "module": "binder"
        },
        {
            "file": "src\\durandal\\js\\binder.js",
            "line": 107,
            "description": "Indicates whether or not the binding system should throw errors or not.",
            "itemtype": "property",
            "name": "throwOnErrors",
            "type": "Boolean",
            "default": "false The binding system will not throw errors by default. Instead it will log them.",
            "class": "BinderModule",
            "module": "binder"
        },
        {
            "file": "src\\durandal\\js\\binder.js",
            "line": 113,
            "description": "Gets the binding instruction that was associated with a view when it was bound.",
            "itemtype": "method",
            "name": "getBindingInstruction",
            "params": [
                {
                    "name": "view",
                    "description": "The view that was previously bound.",
                    "type": "DOMElement"
                }
            ],
            "return": {
                "description": "The object that carries the binding instructions.",
                "type": "Object"
            },
            "class": "BinderModule",
            "module": "binder"
        },
        {
            "file": "src\\durandal\\js\\binder.js",
            "line": 122,
            "description": "Binds the view, preserving the existing binding context. Optionally, a new context can be created, parented to the previous context.",
            "itemtype": "method",
            "name": "bindContext",
            "params": [
                {
                    "name": "bindingContext",
                    "description": "The current binding context.",
                    "type": "KnockoutBindingContext"
                },
                {
                    "name": "view",
                    "description": "The view to bind.",
                    "type": "DOMElement"
                },
                {
                    "name": "obj",
                    "description": "The data to bind to, causing the creation of a child binding context if present.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "dataAlias",
                    "description": "An alias for $data if present.",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "BinderModule",
            "module": "binder"
        },
        {
            "file": "src\\durandal\\js\\binder.js",
            "line": 137,
            "description": "Binds the view, preserving the existing binding context. Optionally, a new context can be created, parented to the previous context.",
            "itemtype": "method",
            "name": "bind",
            "params": [
                {
                    "name": "obj",
                    "description": "The data to bind to.",
                    "type": "Object"
                },
                {
                    "name": "view",
                    "description": "The view to bind.",
                    "type": "DOMElement"
                }
            ],
            "class": "BinderModule",
            "module": "binder"
        },
        {
            "file": "src\\durandal\\js\\composition.js",
            "line": 264,
            "description": "Registers a callback which will be invoked when the current composition transaction has completed. The transaction includes all parent and children compositions.",
            "itemtype": "method",
            "name": "complete",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be invoked when composition is complete.",
                    "type": "Function"
                }
            ],
            "class": "CompositionTransaction",
            "module": "composition"
        },
        {
            "file": "src\\durandal\\js\\composition.js",
            "line": 279,
            "description": "An array of all the binding handler names (includeing :) that trigger a composition.",
            "itemtype": "property",
            "name": "composeBindings",
            "type": "String",
            "default": "['compose:']",
            "class": "CompositionModule",
            "module": "composition"
        },
        {
            "file": "src\\durandal\\js\\composition.js",
            "line": 285,
            "description": "Converts a transition name to its moduleId.",
            "itemtype": "method",
            "name": "convertTransitionToModuleId",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the transtion.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The moduleId.",
                "type": "String"
            },
            "class": "CompositionModule",
            "module": "composition"
        },
        {
            "file": "src\\durandal\\js\\composition.js",
            "line": 294,
            "description": "The name of the transition to use in all compositions.",
            "itemtype": "property",
            "name": "defaultTransitionName",
            "type": "String",
            "default": "null",
            "class": "CompositionModule",
            "module": "composition"
        },
        {
            "file": "src\\durandal\\js\\composition.js",
            "line": 300,
            "description": "Represents the currently executing composition transaction.",
            "itemtype": "property",
            "name": "current",
            "type": "CompositionTransaction",
            "class": "CompositionModule",
            "module": "composition"
        },
        {
            "file": "src\\durandal\\js\\composition.js",
            "line": 305,
            "description": "Registers a binding handler that will be invoked when the current composition transaction is complete.",
            "itemtype": "method",
            "name": "addBindingHandler",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the binding handler.",
                    "type": "String"
                },
                {
                    "name": "config",
                    "description": "The binding handler instance. If none is provided, the name will be used to look up an existing handler which will then be converted to a composition handler.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "initOptionsFactory",
                    "description": "If the registered binding needs to return options from its init call back to knockout, this function will server as a factory for those options. It will receive the same parameters that the init function does.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "CompositionModule",
            "module": "composition"
        },
        {
            "file": "src\\durandal\\js\\composition.js",
            "line": 368,
            "description": "Gets an object keyed with all the elements that are replacable parts, found within the supplied elements. The key will be the part name and the value will be the element itself.",
            "itemtype": "method",
            "name": "getParts",
            "params": [
                {
                    "name": "elements",
                    "description": "The element(s) to search for parts.",
                    "type": "DOMElement\\DOMElement[]"
                }
            ],
            "return": {
                "description": "An object keyed by part.",
                "type": "Object"
            },
            "class": "CompositionModule",
            "module": "composition"
        },
        {
            "file": "src\\durandal\\js\\composition.js",
            "line": 540,
            "description": "Eecutes the default view location strategy.",
            "itemtype": "method",
            "name": "defaultStrategy",
            "params": [
                {
                    "name": "context",
                    "description": "The composition context containing the model and possibly existing viewElements.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise for the view.",
                "type": "Promise"
            },
            "class": "CompositionModule",
            "module": "composition"
        },
        {
            "file": "src\\durandal\\js\\composition.js",
            "line": 633,
            "description": "Initiates a composition.",
            "itemtype": "method",
            "name": "compose",
            "params": [
                {
                    "name": "element",
                    "description": "The DOMElement or knockout virtual element that serves as the parent for the composition.",
                    "type": "DOMElement"
                },
                {
                    "name": "settings",
                    "description": "The composition settings.",
                    "type": "Object"
                },
                {
                    "name": "bindingContext",
                    "description": "The current binding context.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "CompositionModule",
            "module": "composition"
        },
        {
            "file": "src\\durandal\\js\\events.js",
            "line": 20,
            "description": "Attaches a callback to the event subscription.",
            "itemtype": "method",
            "name": "then",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback function to invoke when the event is triggered.",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "An object to use as `this` when invoking the `callback`.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "Subscription",
            "module": "events"
        },
        {
            "file": "src\\durandal\\js\\events.js",
            "line": 39,
            "description": "Attaches a callback to the event subscription.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback function to invoke when the event is triggered. If `callback` is not provided, the previous callback will be re-activated.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "context",
                    "description": "An object to use as `this` when invoking the `callback`.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "Subscription",
            "module": "events"
        },
        {
            "file": "src\\durandal\\js\\events.js",
            "line": 48,
            "description": "Cancels the subscription.",
            "itemtype": "method",
            "name": "off",
            "chainable": 1,
            "class": "Subscription",
            "module": "events"
        },
        {
            "file": "src\\durandal\\js\\events.js",
            "line": 63,
            "description": "Creates a subscription or registers a callback for the specified event.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "events",
                    "description": "One or more events, separated by white space.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback function to invoke when the event is triggered. If `callback` is not provided, a subscription instance is returned.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "context",
                    "description": "An object to use as `this` when invoking the `callback`.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "A subscription is returned if no callback is supplied, otherwise the events object is returned for chaining.",
                "type": "Subscription|Events"
            },
            "class": "Events",
            "module": "events"
        },
        {
            "file": "src\\durandal\\js\\events.js",
            "line": 89,
            "description": "Removes the callbacks for the specified events.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "events",
                    "description": "One or more events, separated by white space to turn off. If no events are specified, then the callbacks will be removed.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "The callback function to remove. If `callback` is not provided, all callbacks for the specified events will be removed.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "context",
                    "description": "The object that was used as `this`. Callbacks with this context will be removed.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "Events",
            "module": "events"
        },
        {
            "file": "src\\durandal\\js\\events.js",
            "line": 130,
            "description": "Triggers the specified events.",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "events",
                    "description": "One or more events, separated by white space to trigger.",
                    "type": "String",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "Events",
            "module": "events"
        },
        {
            "file": "src\\durandal\\js\\events.js",
            "line": 179,
            "description": "Creates a function that will trigger the specified events when called. Simplifies proxying jQuery (or other) events through to the events object.",
            "itemtype": "method",
            "name": "proxy",
            "params": [
                {
                    "name": "events",
                    "description": "One or more events, separated by white space to trigger by invoking the returned function.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Calling the function will invoke the previously specified events on the events object.",
                "type": "Function"
            },
            "class": "Events",
            "module": "events"
        },
        {
            "file": "src\\durandal\\js\\events.js",
            "line": 198,
            "description": "Adds eventing capabilities to the specified object.",
            "itemtype": "method",
            "name": "includeIn",
            "params": [
                {
                    "name": "targetObject",
                    "description": "The object to add eventing capabilities to.",
                    "type": "Object"
                }
            ],
            "class": "EventsModule",
            "module": "events"
        },
        {
            "file": "src\\durandal\\js\\system.js",
            "line": 121,
            "description": "Durandal's version.",
            "itemtype": "property",
            "name": "version",
            "type": "String",
            "class": "SystemModule",
            "module": "system"
        },
        {
            "file": "src\\durandal\\js\\system.js",
            "line": 126,
            "description": "A noop function.",
            "itemtype": "method",
            "name": "noop",
            "class": "SystemModule",
            "module": "system"
        },
        {
            "file": "src\\durandal\\js\\system.js",
            "line": 131,
            "description": "Gets the module id for the specified object.",
            "itemtype": "method",
            "name": "getModuleId",
            "params": [
                {
                    "name": "obj",
                    "description": "The object whose module id you wish to determine.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The module id.",
                "type": "String"
            },
            "class": "SystemModule",
            "module": "system"
        },
        {
            "file": "src\\durandal\\js\\system.js",
            "line": 152,
            "description": "Sets the module id for the specified object.",
            "itemtype": "method",
            "name": "setModuleId",
            "params": [
                {
                    "name": "obj",
                    "description": "The object whose module id you wish to set.",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": "The id to set for the specified object.",
                    "type": "String"
                }
            ],
            "class": "SystemModule",
            "module": "system"
        },
        {
            "file": "src\\durandal\\js\\system.js",
            "line": 174,
            "description": "Resolves the default object instance for a module. If the module is an object, the module is returned. If the module is a function, that function is called with `new` and it's result is returned.",
            "itemtype": "method",
            "name": "resolveObject",
            "params": [
                {
                    "name": "module",
                    "description": "The module to use to get/create the default object for.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The default object for the module.",
                "type": "Object"
            },
            "class": "SystemModule",
            "module": "system"
        },
        {
            "file": "src\\durandal\\js\\system.js",
            "line": 187,
            "description": "Gets/Sets whether or not Durandal is in debug mode.",
            "itemtype": "method",
            "name": "debug",
            "params": [
                {
                    "name": "enable",
                    "description": "Turns on/off debugging.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "Whether or not Durandal is current debugging.",
                "type": "Boolean"
            },
            "class": "SystemModule",
            "module": "system"
        },
        {
            "file": "src\\durandal\\js\\system.js",
            "line": 209,
            "description": "Logs data to the console. Pass any number of parameters to be logged. Log output is not processed if the framework is not running in debug mode.",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "info",
                    "description": "The objects to log.",
                    "type": "Object",
                    "multiple": true
                }
            ],
            "class": "SystemModule",
            "module": "system"
        },
        {
            "file": "src\\durandal\\js\\system.js",
            "line": 215,
            "description": "Logs an error.",
            "itemtype": "method",
            "name": "error",
            "params": [
                {
                    "name": "obj",
                    "description": "The error to report.",
                    "type": "String|Error"
                }
            ],
            "class": "SystemModule",
            "module": "system"
        },
        {
            "file": "src\\durandal\\js\\system.js",
            "line": 221,
            "description": "Asserts a condition by throwing an error if the condition fails.",
            "itemtype": "method",
            "name": "assert",
            "params": [
                {
                    "name": "condition",
                    "description": "The condition to check.",
                    "type": "Boolean"
                },
                {
                    "name": "message",
                    "description": "The message to report in the error if the condition check fails.",
                    "type": "String"
                }
            ],
            "class": "SystemModule",
            "module": "system"
        },
        {
            "file": "src\\durandal\\js\\system.js",
            "line": 232,
            "description": "Creates a deferred object which can be used to create a promise. Optionally pass a function action to perform which will be passed an object used in resolving the promise.",
            "itemtype": "method",
            "name": "defer",
            "params": [
                {
                    "name": "action",
                    "description": "The action to defer. You will be passed the deferred object as a paramter.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "The deferred object.",
                "type": "Deferred"
            },
            "class": "SystemModule",
            "module": "system"
        },
        {
            "file": "src\\durandal\\js\\system.js",
            "line": 241,
            "description": "Creates a simple V4 UUID. This should not be used as a PK in your database. It can be used to generate internal, unique ids. For a more robust solution see [node-uuid](https://github.com/broofa/node-uuid).",
            "itemtype": "method",
            "name": "guid",
            "return": {
                "description": "The guid.",
                "type": "String"
            },
            "class": "SystemModule",
            "module": "system"
        },
        {
            "file": "src\\durandal\\js\\system.js",
            "line": 254,
            "description": "Uses require.js to obtain a module. This function returns a promise which resolves with the module instance. You can pass more than one module id to this function or an array of ids. If more than one or an array is passed, then the promise will resolve with an array of module instances.",
            "itemtype": "method",
            "name": "acquire",
            "params": [
                {
                    "name": "moduleId",
                    "description": "The id(s) of the modules to load.",
                    "type": "String|string[]"
                }
            ],
            "return": {
                "description": "A promise for the loaded module(s).",
                "type": "Promise"
            },
            "class": "SystemModule",
            "module": "system"
        },
        {
            "file": "src\\durandal\\js\\system.js",
            "line": 287,
            "description": "Extends the first object with the properties of the following objects.",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "obj",
                    "description": "The target object to extend.",
                    "type": "Object"
                },
                {
                    "name": "extension",
                    "description": "Uses to extend the target object.",
                    "type": "Object",
                    "multiple": true
                }
            ],
            "class": "SystemModule",
            "module": "system"
        },
        {
            "file": "src\\durandal\\js\\system.js",
            "line": 308,
            "description": "Uses a setTimeout to wait the specified milliseconds.",
            "itemtype": "method",
            "name": "wait",
            "params": [
                {
                    "name": "milliseconds",
                    "description": "The number of milliseconds to wait.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "SystemModule",
            "module": "system"
        },
        {
            "file": "src\\durandal\\js\\system.js",
            "line": 321,
            "description": "Gets all the owned keys of the specified object.",
            "itemtype": "method",
            "name": "keys",
            "params": [
                {
                    "name": "object",
                    "description": "The object whose owned keys should be returned.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The keys.",
                "type": "String[]"
            },
            "class": "SystemModule",
            "module": "system"
        },
        {
            "file": "src\\durandal\\js\\system.js",
            "line": 343,
            "description": "Determines if the specified object is an html element.",
            "itemtype": "method",
            "name": "isElement",
            "params": [
                {
                    "name": "object",
                    "description": "The object to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if matches the type, false otherwise.",
                "type": "Boolean"
            },
            "class": "SystemModule",
            "module": "system"
        },
        {
            "file": "src\\durandal\\js\\system.js",
            "line": 353,
            "description": "Determines if the specified object is an array.",
            "itemtype": "method",
            "name": "isArray",
            "params": [
                {
                    "name": "object",
                    "description": "The object to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if matches the type, false otherwise.",
                "type": "Boolean"
            },
            "class": "SystemModule",
            "module": "system"
        },
        {
            "file": "src\\durandal\\js\\system.js",
            "line": 363,
            "description": "Determines if the specified object is...an object. ie. Not an array, string, etc.",
            "itemtype": "method",
            "name": "isObject",
            "params": [
                {
                    "name": "object",
                    "description": "The object to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if matches the type, false otherwise.",
                "type": "Boolean"
            },
            "class": "SystemModule",
            "module": "system"
        },
        {
            "file": "src\\durandal\\js\\system.js",
            "line": 373,
            "description": "Determines if the specified object is a boolean.",
            "itemtype": "method",
            "name": "isBoolean",
            "params": [
                {
                    "name": "object",
                    "description": "The object to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if matches the type, false otherwise.",
                "type": "Boolean"
            },
            "class": "SystemModule",
            "module": "system"
        },
        {
            "file": "src\\durandal\\js\\system.js",
            "line": 383,
            "description": "Determines if the specified object is a promise.",
            "itemtype": "method",
            "name": "isPromise",
            "params": [
                {
                    "name": "object",
                    "description": "The object to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if matches the type, false otherwise.",
                "type": "Boolean"
            },
            "class": "SystemModule",
            "module": "system"
        },
        {
            "file": "src\\durandal\\js\\system.js",
            "line": 393,
            "description": "Determines if the specified object is a function arguments object.",
            "itemtype": "method",
            "name": "isArguments",
            "params": [
                {
                    "name": "object",
                    "description": "The object to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if matches the type, false otherwise.",
                "type": "Boolean"
            },
            "class": "SystemModule",
            "module": "system"
        },
        {
            "file": "src\\durandal\\js\\system.js",
            "line": 400,
            "description": "Determines if the specified object is a function.",
            "itemtype": "method",
            "name": "isFunction",
            "params": [
                {
                    "name": "object",
                    "description": "The object to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if matches the type, false otherwise.",
                "type": "Boolean"
            },
            "class": "SystemModule",
            "module": "system"
        },
        {
            "file": "src\\durandal\\js\\system.js",
            "line": 407,
            "description": "Determines if the specified object is a string.",
            "itemtype": "method",
            "name": "isString",
            "params": [
                {
                    "name": "object",
                    "description": "The object to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if matches the type, false otherwise.",
                "type": "Boolean"
            },
            "class": "SystemModule",
            "module": "system"
        },
        {
            "file": "src\\durandal\\js\\system.js",
            "line": 414,
            "description": "Determines if the specified object is a number.",
            "itemtype": "method",
            "name": "isNumber",
            "params": [
                {
                    "name": "object",
                    "description": "The object to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if matches the type, false otherwise.",
                "type": "Boolean"
            },
            "class": "SystemModule",
            "module": "system"
        },
        {
            "file": "src\\durandal\\js\\system.js",
            "line": 421,
            "description": "Determines if the specified object is a date.",
            "itemtype": "method",
            "name": "isDate",
            "params": [
                {
                    "name": "object",
                    "description": "The object to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if matches the type, false otherwise.",
                "type": "Boolean"
            },
            "class": "SystemModule",
            "module": "system"
        },
        {
            "file": "src\\durandal\\js\\system.js",
            "line": 428,
            "description": "Determines if the specified object is a boolean.",
            "itemtype": "method",
            "name": "isBoolean",
            "params": [
                {
                    "name": "object",
                    "description": "The object to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if matches the type, false otherwise.",
                "type": "Boolean"
            },
            "class": "SystemModule",
            "module": "system"
        },
        {
            "file": "src\\durandal\\js\\viewEngine.js",
            "line": 26,
            "description": "The file extension that view source files are expected to have.",
            "itemtype": "property",
            "name": "viewExtension",
            "type": "String",
            "default": ".html",
            "class": "ViewEngineModule",
            "module": "viewEngine"
        },
        {
            "file": "src\\durandal\\js\\viewEngine.js",
            "line": 32,
            "description": "The name of the RequireJS loader plugin used by the viewLocator to obtain the view source. (Use requirejs to map the plugin's full path).",
            "itemtype": "property",
            "name": "viewPlugin",
            "type": "String",
            "default": "text",
            "class": "ViewEngineModule",
            "module": "viewEngine"
        },
        {
            "file": "src\\durandal\\js\\viewEngine.js",
            "line": 38,
            "description": "Parameters passed to the RequireJS loader plugin used by the viewLocator to obtain the view source.",
            "itemtype": "property",
            "name": "viewPluginParameters",
            "type": "String",
            "default": "The empty string by default.",
            "class": "ViewEngineModule",
            "module": "viewEngine"
        },
        {
            "file": "src\\durandal\\js\\viewEngine.js",
            "line": 44,
            "description": "Determines if the url is a url for a view, according to the view engine.",
            "itemtype": "method",
            "name": "isViewUrl",
            "params": [
                {
                    "name": "url",
                    "description": "The potential view url.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if the url is a view url, false otherwise.",
                "type": "Boolean"
            },
            "class": "ViewEngineModule",
            "module": "viewEngine"
        },
        {
            "file": "src\\durandal\\js\\viewEngine.js",
            "line": 53,
            "description": "Converts a view url into a view id.",
            "itemtype": "method",
            "name": "convertViewUrlToViewId",
            "params": [
                {
                    "name": "url",
                    "description": "The url to convert.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The view id.",
                "type": "String"
            },
            "class": "ViewEngineModule",
            "module": "viewEngine"
        },
        {
            "file": "src\\durandal\\js\\viewEngine.js",
            "line": 62,
            "description": "Converts a view id into a full RequireJS path.",
            "itemtype": "method",
            "name": "convertViewIdToRequirePath",
            "params": [
                {
                    "name": "viewId",
                    "description": "The view id to convert.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The require path.",
                "type": "String"
            },
            "class": "ViewEngineModule",
            "module": "viewEngine"
        },
        {
            "file": "src\\durandal\\js\\viewEngine.js",
            "line": 72,
            "description": "Parses the view engine recognized markup and returns DOM elements.",
            "itemtype": "method",
            "name": "parseMarkup",
            "params": [
                {
                    "name": "markup",
                    "description": "The markup to parse.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The elements.",
                "type": "DOMElement[]"
            },
            "class": "ViewEngineModule",
            "module": "viewEngine"
        },
        {
            "file": "src\\durandal\\js\\viewEngine.js",
            "line": 79,
            "description": "Calls `parseMarkup` and then pipes the results through `ensureSingleElement`.",
            "itemtype": "method",
            "name": "processMarkup",
            "params": [
                {
                    "name": "markup",
                    "description": "The markup to process.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The view.",
                "type": "DOMElement"
            },
            "class": "ViewEngineModule",
            "module": "viewEngine"
        },
        {
            "file": "src\\durandal\\js\\viewEngine.js",
            "line": 89,
            "description": "Converts an array of elements into a single element. White space and comments are removed. If a single element does not remain, then the elements are wrapped.",
            "itemtype": "method",
            "name": "ensureSingleElement",
            "params": [
                {
                    "name": "allElements",
                    "description": "The elements.",
                    "type": "DOMElement[]"
                }
            ],
            "return": {
                "description": "A single element.",
                "type": "DOMElement"
            },
            "class": "ViewEngineModule",
            "module": "viewEngine"
        },
        {
            "file": "src\\durandal\\js\\viewEngine.js",
            "line": 124,
            "description": "Gets the view associated with the id from the cache of parsed views.",
            "itemtype": "method",
            "name": "tryGetViewFromCache",
            "params": [
                {
                    "name": "id",
                    "description": "The view id to lookup in the cache.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The cached view or null if it's not in the cache.",
                "type": "DOMElement|null"
            },
            "class": "ViewEngineModule",
            "module": "viewEngine"
        },
        {
            "file": "src\\durandal\\js\\viewEngine.js",
            "line": 133,
            "description": "Puts the view associated with the id into the cache of parsed views.",
            "itemtype": "method",
            "name": "putViewInCache",
            "params": [
                {
                    "name": "id",
                    "description": "The view id whose view should be cached.",
                    "type": "String"
                },
                {
                    "name": "view",
                    "description": "The view to cache.",
                    "type": "DOMElement"
                }
            ],
            "class": "ViewEngineModule",
            "module": "viewEngine"
        },
        {
            "file": "src\\durandal\\js\\viewEngine.js",
            "line": 142,
            "description": "Creates the view associated with the view id.",
            "itemtype": "method",
            "name": "createView",
            "params": [
                {
                    "name": "viewId",
                    "description": "The view id whose view should be created.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A promise of the view.",
                "type": "Promise"
            },
            "class": "ViewEngineModule",
            "module": "viewEngine"
        },
        {
            "file": "src\\durandal\\js\\viewEngine.js",
            "line": 174,
            "description": "Called when a view cannot be found to provide the opportunity to locate or generate a fallback view. Mainly used to ease development.",
            "itemtype": "method",
            "name": "createFallbackView",
            "params": [
                {
                    "name": "viewId",
                    "description": "The view id whose view should be created.",
                    "type": "String"
                },
                {
                    "name": "requirePath",
                    "description": "The require path that was attempted.",
                    "type": "String"
                },
                {
                    "name": "requirePath",
                    "description": "The error that was returned from the attempt to locate the default view.",
                    "type": "Error"
                }
            ],
            "return": {
                "description": "A promise for the fallback view.",
                "type": "Promise"
            },
            "class": "ViewEngineModule",
            "module": "viewEngine"
        },
        {
            "file": "src\\durandal\\js\\viewLocator.js",
            "line": 27,
            "description": "Allows you to set up a convention for mapping module folders to view folders. It is a convenience method that customizes `convertModuleIdToViewId` and `translateViewIdToArea` under the covers.",
            "itemtype": "method",
            "name": "useConvention",
            "params": [
                {
                    "name": "modulesPath",
                    "description": "A string to match in the path and replace with the viewsPath. If not specified, the match is 'viewmodels'.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "viewsPath",
                    "description": "The replacement for the modulesPath. If not specified, the replacement is 'views'.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "areasPath",
                    "description": "Partial views are mapped to the \"views\" folder if not specified. Use this parameter to change their location.",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "ViewLocatorModule",
            "module": "viewLocator"
        },
        {
            "file": "src\\durandal\\js\\viewLocator.js",
            "line": 53,
            "description": "Maps an object instance to a view instance.",
            "itemtype": "method",
            "name": "locateViewForObject",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to locate the view for.",
                    "type": "Object"
                },
                {
                    "name": "area",
                    "description": "The area to translate the view to.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "elementsToSearch",
                    "description": "An existing set of elements to search first.",
                    "type": "DOMElement[]",
                    "optional": true
                }
            ],
            "return": {
                "description": "A promise of the view.",
                "type": "Promise"
            },
            "class": "ViewLocatorModule",
            "module": "viewLocator"
        },
        {
            "file": "src\\durandal\\js\\viewLocator.js",
            "line": 82,
            "description": "Converts a module id into a view id. By default the ids are the same.",
            "itemtype": "method",
            "name": "convertModuleIdToViewId",
            "params": [
                {
                    "name": "moduleId",
                    "description": "The module id.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The view id.",
                "type": "String"
            },
            "class": "ViewLocatorModule",
            "module": "viewLocator"
        },
        {
            "file": "src\\durandal\\js\\viewLocator.js",
            "line": 91,
            "description": "If no view id can be determined, this function is called to genreate one. By default it attempts to determine the object's type and use that.",
            "itemtype": "method",
            "name": "determineFallbackViewId",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to determine the fallback id for.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The view id.",
                "type": "String"
            },
            "class": "ViewLocatorModule",
            "module": "viewLocator"
        },
        {
            "file": "src\\durandal\\js\\viewLocator.js",
            "line": 104,
            "description": "Takes a view id and translates it into a particular area. By default, no translation occurs.",
            "itemtype": "method",
            "name": "translateViewIdToArea",
            "params": [
                {
                    "name": "viewId",
                    "description": "The view id.",
                    "type": "String"
                },
                {
                    "name": "area",
                    "description": "The area to translate the view to.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The translated view id.",
                "type": "String"
            },
            "class": "ViewLocatorModule",
            "module": "viewLocator"
        },
        {
            "file": "src\\durandal\\js\\viewLocator.js",
            "line": 114,
            "description": "Locates the specified view.",
            "itemtype": "method",
            "name": "locateView",
            "params": [
                {
                    "name": "viewOrUrlOrId",
                    "description": "A view, view url or view id to locate.",
                    "type": "String|DOMElement"
                },
                {
                    "name": "area",
                    "description": "The area to translate the view to.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "elementsToSearch",
                    "description": "An existing set of elements to search first.",
                    "type": "DOMElement[]",
                    "optional": true
                }
            ],
            "return": {
                "description": "A promise of the view.",
                "type": "Promise"
            },
            "class": "ViewLocatorModule",
            "module": "viewLocator"
        },
        {
            "file": "src\\plugins\\js\\dialog.js",
            "line": 29,
            "description": "Selects an option and closes the message box, returning the selected option through the dialog system's promise.",
            "itemtype": "method",
            "name": "selectOption",
            "params": [
                {
                    "name": "dialogResult",
                    "description": "The result to select.",
                    "type": "String"
                }
            ],
            "class": "MessageBox",
            "module": "dialog"
        },
        {
            "file": "src\\plugins\\js\\dialog.js",
            "line": 38,
            "description": "Provides the view to the composition system.",
            "itemtype": "method",
            "name": "getView",
            "return": {
                "description": "The view of the message box.",
                "type": "DOMElement"
            },
            "class": "MessageBox",
            "module": "dialog"
        },
        {
            "file": "src\\plugins\\js\\dialog.js",
            "line": 47,
            "description": "Configures a custom view to use when displaying message boxes.",
            "itemtype": "method",
            "name": "setViewUrl",
            "params": [
                {
                    "name": "viewUrl",
                    "description": "The view url relative to the base url which the view locator will use to find the message box's view.",
                    "type": "String"
                }
            ],
            "static": 1,
            "class": "MessageBox",
            "module": "dialog"
        },
        {
            "file": "src\\plugins\\js\\dialog.js",
            "line": 58,
            "description": "The title to be used for the message box if one is not provided.",
            "itemtype": "property",
            "name": "defaultTitle",
            "type": "String",
            "default": "Application",
            "static": 1,
            "class": "MessageBox",
            "module": "dialog"
        },
        {
            "file": "src\\plugins\\js\\dialog.js",
            "line": 66,
            "description": "The options to display in the message box if none are specified.",
            "itemtype": "property",
            "name": "defaultOptions",
            "type": "String[]",
            "default": "['Ok']",
            "static": 1,
            "class": "MessageBox",
            "module": "dialog"
        },
        {
            "file": "src\\plugins\\js\\dialog.js",
            "line": 77,
            "description": "Sets the classes and styles used throughout the message box markup.",
            "itemtype": "method",
            "name": "setDefaults",
            "params": [
                {
                    "name": "settings",
                    "description": "A settings object containing the following optional properties: buttonClass, primaryButtonClass, secondaryButtonClass, class, style.",
                    "type": "Object"
                }
            ],
            "class": "MessageBox",
            "module": "dialog"
        },
        {
            "file": "src\\plugins\\js\\dialog.js",
            "line": 156,
            "description": "The markup for the message box's view.",
            "itemtype": "property",
            "name": "defaultViewMarkup",
            "type": "String",
            "static": 1,
            "class": "MessageBox",
            "module": "dialog"
        },
        {
            "file": "src\\plugins\\js\\dialog.js",
            "line": 197,
            "description": "The constructor function used to create message boxes.",
            "itemtype": "property",
            "name": "MessageBox",
            "type": "MessageBox",
            "class": "DialogModule",
            "module": "dialog"
        },
        {
            "file": "src\\plugins\\js\\dialog.js",
            "line": 202,
            "description": "The css zIndex that the last dialog was displayed at.",
            "itemtype": "property",
            "name": "currentZIndex",
            "type": "Number",
            "class": "DialogModule",
            "module": "dialog"
        },
        {
            "file": "src\\plugins\\js\\dialog.js",
            "line": 207,
            "description": "Gets the next css zIndex at which a dialog should be displayed.",
            "itemtype": "method",
            "name": "getNextZIndex",
            "return": {
                "description": "The next usable zIndex.",
                "type": "Number"
            },
            "class": "DialogModule",
            "module": "dialog"
        },
        {
            "file": "src\\plugins\\js\\dialog.js",
            "line": 215,
            "description": "Determines whether or not there are any dialogs open.",
            "itemtype": "method",
            "name": "isOpen",
            "return": {
                "description": "True if a dialog is open. false otherwise.",
                "type": "Boolean"
            },
            "class": "DialogModule",
            "module": "dialog"
        },
        {
            "file": "src\\plugins\\js\\dialog.js",
            "line": 223,
            "description": "Gets the dialog context by name or returns the default context if no name is specified.",
            "itemtype": "method",
            "name": "getContext",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the context to retrieve.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "True context.",
                "type": "DialogContext"
            },
            "class": "DialogModule",
            "module": "dialog"
        },
        {
            "file": "src\\plugins\\js\\dialog.js",
            "line": 232,
            "description": "Adds (or replaces) a dialog context.",
            "itemtype": "method",
            "name": "addContext",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the context to add.",
                    "type": "String"
                },
                {
                    "name": "dialogContext",
                    "description": "The context to add.",
                    "type": "DialogContext"
                }
            ],
            "class": "DialogModule",
            "module": "dialog"
        },
        {
            "file": "src\\plugins\\js\\dialog.js",
            "line": 268,
            "description": "Gets the dialog model that is associated with the specified object.",
            "itemtype": "method",
            "name": "getDialog",
            "params": [
                {
                    "name": "obj",
                    "description": "The object for whom to retrieve the dialog.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The dialog model.",
                "type": "Dialog"
            },
            "class": "DialogModule",
            "module": "dialog"
        },
        {
            "file": "src\\plugins\\js\\dialog.js",
            "line": 281,
            "description": "Closes the dialog associated with the specified object.",
            "itemtype": "method",
            "name": "close",
            "params": [
                {
                    "name": "obj",
                    "description": "The object whose dialog should be closed.",
                    "type": "Object"
                },
                {
                    "name": "results",
                    "description": "The results to return back to the dialog caller after closing.",
                    "type": "Object",
                    "multiple": true
                }
            ],
            "class": "DialogModule",
            "module": "dialog"
        },
        {
            "file": "src\\plugins\\js\\dialog.js",
            "line": 294,
            "description": "Shows a dialog.",
            "itemtype": "method",
            "name": "show",
            "params": [
                {
                    "name": "obj",
                    "description": "The object (or moduleId) to display as a dialog.",
                    "type": "Object|string"
                },
                {
                    "name": "activationData",
                    "description": "The data that should be passed to the object upon activation.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "context",
                    "description": "The name of the dialog context to use. Uses the default context if none is specified.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "A promise that resolves when the dialog is closed and returns any data passed at the time of closing.",
                "type": "Promise"
            },
            "class": "DialogModule",
            "module": "dialog"
        },
        {
            "file": "src\\plugins\\js\\dialog.js",
            "line": 348,
            "description": "Shows a message box.",
            "itemtype": "method",
            "name": "showMessage",
            "params": [
                {
                    "name": "message",
                    "description": "The message to display in the dialog.",
                    "type": "String"
                },
                {
                    "name": "title",
                    "description": "The title message.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "The options to provide to the user.",
                    "type": "String[]",
                    "optional": true
                },
                {
                    "name": "autoclose",
                    "description": "Automatically close the the message box when clicking outside?",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "settings",
                    "description": "Custom settings for this instance of the messsage box, used to change classes and styles.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "A promise that resolves when the message box is closed and returns the selected option.",
                "type": "Promise"
            },
            "class": "DialogModule",
            "module": "dialog"
        },
        {
            "file": "src\\plugins\\js\\dialog.js",
            "line": 371,
            "description": "Installs this module into Durandal; called by the framework. Adds `app.showDialog` and `app.showMessage` convenience methods.",
            "itemtype": "method",
            "name": "install",
            "params": [
                {
                    "name": "config",
                    "description": "Add a `messageBox` property to supply a custom message box constructor. Add a `messageBoxView` property to supply custom view markup for the built-in message box. You can also use messageBoxViewUrl to specify the view url.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "DialogModule",
            "module": "dialog"
        },
        {
            "file": "src\\plugins\\js\\dialog.js",
            "line": 413,
            "description": "In this function, you are expected to add a DOM element to the tree which will serve as the \"host\" for the modal's composed view. You must add a property called host to the modalWindow object which references the dom element. It is this host which is passed to the composition module.",
            "itemtype": "method",
            "name": "addHost",
            "params": [
                {
                    "name": "theDialog",
                    "description": "The dialog model.",
                    "type": "Dialog"
                }
            ],
            "class": "DialogContext",
            "module": "dialog"
        },
        {
            "file": "src\\plugins\\js\\dialog.js",
            "line": 444,
            "description": "This function is expected to remove any DOM machinery associated with the specified dialog and do any other necessary cleanup.",
            "itemtype": "method",
            "name": "removeHost",
            "params": [
                {
                    "name": "theDialog",
                    "description": "The dialog model.",
                    "type": "Dialog"
                }
            ],
            "class": "DialogContext",
            "module": "dialog"
        },
        {
            "file": "src\\plugins\\js\\dialog.js",
            "line": 474,
            "description": "This function is called after the modal is fully composed into the DOM, allowing your implementation to do any final modifications, such as positioning or animation. You can obtain the original dialog object by using `getDialog` on context.model.",
            "itemtype": "method",
            "name": "compositionComplete",
            "params": [
                {
                    "name": "child",
                    "description": "The dialog view.",
                    "type": "DOMElement"
                },
                {
                    "name": "parent",
                    "description": "The parent view.",
                    "type": "DOMElement"
                },
                {
                    "name": "context",
                    "description": "The composition context.",
                    "type": "Object"
                }
            ],
            "class": "DialogContext",
            "module": "dialog"
        },
        {
            "file": "src\\plugins\\js\\dialog.js",
            "line": 517,
            "description": "This function is called to reposition the model view.",
            "itemtype": "method",
            "name": "reposition",
            "params": [
                {
                    "name": "view",
                    "description": "The dialog view.",
                    "type": "DOMElement"
                }
            ],
            "class": "DialogContext",
            "module": "dialog"
        },
        {
            "file": "src\\plugins\\js\\history.js",
            "line": 42,
            "description": "The setTimeout interval used when the browser does not support hash change events.",
            "itemtype": "property",
            "name": "interval",
            "type": "String",
            "default": "50",
            "class": "HistoryModule",
            "module": "history"
        },
        {
            "file": "src\\plugins\\js\\history.js",
            "line": 48,
            "description": "Indicates whether or not the history module is actively tracking history.",
            "itemtype": "property",
            "name": "active",
            "type": "String",
            "class": "HistoryModule",
            "module": "history"
        },
        {
            "file": "src\\plugins\\js\\history.js",
            "line": 61,
            "description": "Gets the true hash value. Cannot use location.hash directly due to a bug in Firefox where location.hash will always be decoded.",
            "itemtype": "method",
            "name": "getHash",
            "params": [
                {
                    "name": "window",
                    "description": "The optional window instance",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The hash.",
                "type": "String"
            },
            "class": "HistoryModule",
            "module": "history"
        },
        {
            "file": "src\\plugins\\js\\history.js",
            "line": 72,
            "description": "Get the cross-browser normalized URL fragment, either from the URL, the hash, or the override.",
            "itemtype": "method",
            "name": "getFragment",
            "params": [
                {
                    "name": "fragment",
                    "description": "The fragment.",
                    "type": "String"
                },
                {
                    "name": "forcePushState",
                    "description": "Should we force push state?",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "he fragment.",
                "type": "String"
            },
            "class": "HistoryModule",
            "module": "history"
        },
        {
            "file": "src\\plugins\\js\\history.js",
            "line": 95,
            "description": "Activate the hash change handling, returning `true` if the current URL matches an existing route, and `false` otherwise.",
            "itemtype": "method",
            "name": "activate",
            "params": [
                {
                    "name": "options.",
                    "description": "",
                    "type": "HistoryOptions"
                }
            ],
            "return": {
                "description": "Returns true/false from loading the url unless the silent option was selected.",
                "type": "Boolean|undefined"
            },
            "class": "HistoryModule",
            "module": "history"
        },
        {
            "file": "src\\plugins\\js\\history.js",
            "line": 167,
            "description": "Disable history, perhaps temporarily. Not useful in a real app, but possibly useful for unit testing Routers.",
            "itemtype": "method",
            "name": "deactivate",
            "class": "HistoryModule",
            "module": "history"
        },
        {
            "file": "src\\plugins\\js\\history.js",
            "line": 177,
            "description": "Checks the current URL to see if it has changed, and if it has, calls `loadUrl`, normalizing across the hidden iframe.",
            "itemtype": "method",
            "name": "checkUrl",
            "return": {
                "description": "Returns true/false from loading the url.",
                "type": "Boolean"
            },
            "class": "HistoryModule",
            "module": "history"
        },
        {
            "file": "src\\plugins\\js\\history.js",
            "line": 199,
            "description": "Attempts to load the current URL fragment. A pass-through to options.routeHandler.",
            "itemtype": "method",
            "name": "loadUrl",
            "return": {
                "description": "Returns true/false from the route handler.",
                "type": "Boolean"
            },
            "class": "HistoryModule",
            "module": "history"
        },
        {
            "file": "src\\plugins\\js\\history.js",
            "line": 212,
            "description": "Save a fragment into the hash history, or replace the URL state if the\n'replace' option is passed. You are responsible for properly URL-encoding\nthe fragment in advance.\nThe options object can contain `trigger: false` if you wish to not have the\nroute callback be fired, or `replace: true`, if\nyou wish to modify the current URL without adding an entry to the history.",
            "itemtype": "method",
            "name": "navigate",
            "params": [
                {
                    "name": "fragment",
                    "description": "The url fragment to navigate to.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "An options object with optional trigger and replace flags. You can also pass a boolean directly to set the trigger option. Trigger is `true` by default.",
                    "type": "Object|boolean"
                }
            ],
            "return": {
                "description": "Returns true/false from loading the url.",
                "type": "Boolean"
            },
            "class": "HistoryModule",
            "module": "history"
        },
        {
            "file": "src\\plugins\\js\\history.js",
            "line": 285,
            "description": "Navigates back in the browser history.",
            "itemtype": "method",
            "name": "navigateBack",
            "class": "HistoryModule",
            "module": "history"
        },
        {
            "file": "src\\plugins\\js\\history.js",
            "line": 298,
            "description": "The function that will be called back when the fragment changes.",
            "itemtype": "property",
            "name": "routeHandler",
            "type": "Function",
            "class": "HistoryOptions",
            "module": "history"
        },
        {
            "file": "src\\plugins\\js\\history.js",
            "line": 303,
            "description": "The url root used to extract the fragment when using push state.",
            "itemtype": "property",
            "name": "root",
            "type": "String",
            "class": "HistoryOptions",
            "module": "history"
        },
        {
            "file": "src\\plugins\\js\\history.js",
            "line": 308,
            "description": "Use hash change when present.",
            "itemtype": "property",
            "name": "hashChange",
            "type": "Boolean",
            "default": "true",
            "class": "HistoryOptions",
            "module": "history"
        },
        {
            "file": "src\\plugins\\js\\history.js",
            "line": 314,
            "description": "Use push state when present.",
            "itemtype": "property",
            "name": "pushState",
            "type": "Boolean",
            "default": "false",
            "class": "HistoryOptions",
            "module": "history"
        },
        {
            "file": "src\\plugins\\js\\history.js",
            "line": 320,
            "description": "Prevents loading of the current url when activating history.",
            "itemtype": "property",
            "name": "silent",
            "type": "Boolean",
            "default": "false",
            "class": "HistoryOptions",
            "module": "history"
        },
        {
            "file": "src\\plugins\\js\\http.js",
            "line": 13,
            "description": "The name of the callback parameter to inject into jsonp requests by default.",
            "itemtype": "property",
            "name": "callbackParam",
            "type": "String",
            "default": "callback",
            "class": "HTTPModule",
            "module": "http"
        },
        {
            "file": "src\\plugins\\js\\http.js",
            "line": 19,
            "description": "Converts the data to JSON.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "data",
                    "description": "The data to convert to JSON.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "JSON.",
                "type": "String"
            },
            "class": "HTTPModule",
            "module": "http"
        },
        {
            "file": "src\\plugins\\js\\http.js",
            "line": 28,
            "description": "Makes an HTTP GET request.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "url",
                    "description": "The url to send the get request to.",
                    "type": "String"
                },
                {
                    "name": "query",
                    "description": "An optional key/value object to transform into query string parameters.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "headers",
                    "description": "The data to add to the request header.  It will be converted to JSON. If the data contains Knockout observables, they will be converted into normal properties before serialization.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "A promise of the get response data.",
                "type": "Promise"
            },
            "class": "HTTPModule",
            "module": "http"
        },
        {
            "file": "src\\plugins\\js\\http.js",
            "line": 39,
            "description": "Makes an JSONP request.",
            "itemtype": "method",
            "name": "jsonp",
            "params": [
                {
                    "name": "url",
                    "description": "The url to send the get request to.",
                    "type": "String"
                },
                {
                    "name": "query",
                    "description": "An optional key/value object to transform into query string parameters.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callbackParam",
                    "description": "The name of the callback parameter the api expects (overrides the default callbackParam).",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "headers",
                    "description": "The data to add to the request header.  It will be converted to JSON. If the data contains Knockout observables, they will be converted into normal properties before serialization.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "A promise of the response data.",
                "type": "Promise"
            },
            "class": "HTTPModule",
            "module": "http"
        },
        {
            "file": "src\\plugins\\js\\http.js",
            "line": 68,
            "description": "Makes an HTTP PUT request.",
            "itemtype": "method",
            "name": "put",
            "params": [
                {
                    "name": "url",
                    "description": "The url to send the put request to.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The data to put. It will be converted to JSON. If the data contains Knockout observables, they will be converted into normal properties before serialization.",
                    "type": "Object"
                },
                {
                    "name": "headers",
                    "description": "The data to add to the request header.  It will be converted to JSON. If the data contains Knockout observables, they will be converted into normal properties before serialization.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "A promise of the response data.",
                "type": "Promise"
            },
            "class": "HTTPModule",
            "module": "http"
        },
        {
            "file": "src\\plugins\\js\\http.js",
            "line": 86,
            "description": "Makes an HTTP POST request.",
            "itemtype": "method",
            "name": "post",
            "params": [
                {
                    "name": "url",
                    "description": "The url to send the post request to.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The data to post. It will be converted to JSON. If the data contains Knockout observables, they will be converted into normal properties before serialization.",
                    "type": "Object"
                },
                {
                    "name": "headers",
                    "description": "The data to add to the request header.  It will be converted to JSON. If the data contains Knockout observables, they will be converted into normal properties before serialization.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "A promise of the response data.",
                "type": "Promise"
            },
            "class": "HTTPModule",
            "module": "http"
        },
        {
            "file": "src\\plugins\\js\\http.js",
            "line": 104,
            "description": "Makes an HTTP DELETE request.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "url",
                    "description": "The url to send the delete request to.",
                    "type": "String"
                },
                {
                    "name": "query",
                    "description": "An optional key/value object to transform into query string parameters.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "headers",
                    "description": "The data to add to the request header.  It will be converted to JSON. If the data contains Knockout observables, they will be converted into normal properties before serialization.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "A promise of the get response data.",
                "type": "Promise"
            },
            "class": "HTTPModule",
            "module": "http"
        },
        {
            "file": "src\\plugins\\js\\observable.js",
            "line": 159,
            "description": "Converts an entire object into an observable object by re-writing its attributes using ES5 getters and setters. Attributes beginning with '_' or '$' are ignored.",
            "itemtype": "method",
            "name": "convertObject",
            "params": [
                {
                    "name": "obj",
                    "description": "The target object to convert.",
                    "type": "Object"
                }
            ],
            "class": "ObservableModule",
            "module": "observable"
        },
        {
            "file": "src\\plugins\\js\\observable.js",
            "line": 242,
            "description": "Converts a normal property into an observable property using ES5 getters and setters.",
            "itemtype": "method",
            "name": "convertProperty",
            "params": [
                {
                    "name": "obj",
                    "description": "The target object on which the property to convert lives.",
                    "type": "Object"
                },
                {
                    "name": "propertyName",
                    "description": "The name of the property to convert.",
                    "type": "String"
                },
                {
                    "name": "original",
                    "description": "The original value of the property. If not specified, it will be retrieved from the object.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The underlying observable.",
                "type": "KnockoutObservable"
            },
            "class": "ObservableModule",
            "module": "observable"
        },
        {
            "file": "src\\plugins\\js\\observable.js",
            "line": 319,
            "description": "Defines a computed property using ES5 getters and setters.",
            "itemtype": "method",
            "name": "defineProperty",
            "params": [
                {
                    "name": "obj",
                    "description": "The target object on which to create the property.",
                    "type": "Object"
                },
                {
                    "name": "propertyName",
                    "description": "The name of the property to define.",
                    "type": "String"
                },
                {
                    "name": "evaluatorOrOptions",
                    "description": "The Knockout computed function or computed options object.",
                    "type": "Function|object"
                }
            ],
            "return": {
                "description": "The underlying computed observable.",
                "type": "KnockoutObservable"
            },
            "class": "ObservableModule",
            "module": "observable"
        },
        {
            "file": "src\\plugins\\js\\observable.js",
            "line": 385,
            "description": "Installs the plugin into the view model binder's `beforeBind` hook so that objects are automatically converted before being bound.",
            "itemtype": "method",
            "name": "install",
            "class": "ObservableModule",
            "module": "observable"
        },
        {
            "file": "src\\plugins\\js\\router.js",
            "line": 75,
            "description": "Triggered when the navigation logic has completed.",
            "itemtype": "event",
            "name": "router:navigation:complete",
            "params": [
                {
                    "name": "instance",
                    "description": "The activated instance.",
                    "type": "Object"
                },
                {
                    "name": "instruction",
                    "description": "The routing instruction.",
                    "type": "Object"
                },
                {
                    "name": "router",
                    "description": "The router.",
                    "type": "Router"
                }
            ],
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src\\plugins\\js\\router.js",
            "line": 83,
            "description": "Triggered when the navigation has been cancelled.",
            "itemtype": "event",
            "name": "router:navigation:cancelled",
            "params": [
                {
                    "name": "instance",
                    "description": "The activated instance.",
                    "type": "Object"
                },
                {
                    "name": "instruction",
                    "description": "The routing instruction.",
                    "type": "Object"
                },
                {
                    "name": "router",
                    "description": "The router.",
                    "type": "Router"
                }
            ],
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src\\plugins\\js\\router.js",
            "line": 91,
            "description": "Triggered when navigation begins.",
            "itemtype": "event",
            "name": "router:navigation:processing",
            "params": [
                {
                    "name": "instruction",
                    "description": "The routing instruction.",
                    "type": "Object"
                },
                {
                    "name": "router",
                    "description": "The router.",
                    "type": "Router"
                }
            ],
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src\\plugins\\js\\router.js",
            "line": 98,
            "description": "Triggered right before a route is activated.",
            "itemtype": "event",
            "name": "router:route:activating",
            "params": [
                {
                    "name": "instance",
                    "description": "The activated instance.",
                    "type": "Object"
                },
                {
                    "name": "instruction",
                    "description": "The routing instruction.",
                    "type": "Object"
                },
                {
                    "name": "router",
                    "description": "The router.",
                    "type": "Router"
                }
            ],
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src\\plugins\\js\\router.js",
            "line": 106,
            "description": "Triggered right before a route is configured.",
            "itemtype": "event",
            "name": "router:route:before-config",
            "params": [
                {
                    "name": "config",
                    "description": "The route config.",
                    "type": "Object"
                },
                {
                    "name": "router",
                    "description": "The router.",
                    "type": "Router"
                }
            ],
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src\\plugins\\js\\router.js",
            "line": 113,
            "description": "Triggered just after a route is configured.",
            "itemtype": "event",
            "name": "router:route:after-config",
            "params": [
                {
                    "name": "config",
                    "description": "The route config.",
                    "type": "Object"
                },
                {
                    "name": "router",
                    "description": "The router.",
                    "type": "Router"
                }
            ],
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src\\plugins\\js\\router.js",
            "line": 120,
            "description": "Triggered when the view for the activated instance is attached.",
            "itemtype": "event",
            "name": "router:navigation:attached",
            "params": [
                {
                    "name": "instance",
                    "description": "The activated instance.",
                    "type": "Object"
                },
                {
                    "name": "instruction",
                    "description": "The routing instruction.",
                    "type": "Object"
                },
                {
                    "name": "router",
                    "description": "The router.",
                    "type": "Router"
                }
            ],
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src\\plugins\\js\\router.js",
            "line": 128,
            "description": "Triggered when the composition that the activated instance participates in is complete.",
            "itemtype": "event",
            "name": "router:navigation:composition-complete",
            "params": [
                {
                    "name": "instance",
                    "description": "The activated instance.",
                    "type": "Object"
                },
                {
                    "name": "instruction",
                    "description": "The routing instruction.",
                    "type": "Object"
                },
                {
                    "name": "router",
                    "description": "The router.",
                    "type": "Router"
                }
            ],
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src\\plugins\\js\\router.js",
            "line": 136,
            "description": "Triggered when the router does not find a matching route.",
            "itemtype": "event",
            "name": "router:route:not-found",
            "params": [
                {
                    "name": "fragment",
                    "description": "The url fragment.",
                    "type": "String"
                },
                {
                    "name": "router",
                    "description": "The router.",
                    "type": "Router"
                }
            ],
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src\\plugins\\js\\router.js",
            "line": 151,
            "description": "The route handlers that are registered. Each handler consists of a `routePattern` and a `callback`.",
            "itemtype": "property",
            "name": "handlers",
            "type": "Object[]",
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src\\plugins\\js\\router.js",
            "line": 156,
            "description": "The route configs that are registered.",
            "itemtype": "property",
            "name": "routes",
            "type": "Object[]",
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src\\plugins\\js\\router.js",
            "line": 161,
            "description": "The route configurations that have been designated as displayable in a nav ui (nav:true).",
            "itemtype": "property",
            "name": "navigationModel",
            "type": "KnockoutObservableArray",
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src\\plugins\\js\\router.js",
            "line": 166,
            "description": "The active item/screen based on the current navigation state.",
            "itemtype": "property",
            "name": "activeItem",
            "type": "Activator",
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src\\plugins\\js\\router.js",
            "line": 171,
            "description": "Indicates that the router (or a child router) is currently in the process of navigating.",
            "itemtype": "property",
            "name": "isNavigating",
            "type": "KnockoutComputed",
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src\\plugins\\js\\router.js",
            "line": 184,
            "description": "An observable surfacing the active routing instruction that is currently being processed or has recently finished processing.\nThe instruction object has `config`, `fragment`, `queryString`, `params` and `queryParams` properties.",
            "itemtype": "property",
            "name": "activeInstruction",
            "type": "KnockoutObservable",
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src\\plugins\\js\\router.js",
            "line": 342,
            "description": "Inspects routes and modules before activation. Can be used to protect access by cancelling navigation or redirecting.",
            "itemtype": "method",
            "name": "guardRoute",
            "params": [
                {
                    "name": "instance",
                    "description": "The module instance that is about to be activated by the router.",
                    "type": "Object"
                },
                {
                    "name": "instruction",
                    "description": "The route instruction. The instruction object has config, fragment, queryString, params and queryParams properties.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "If a boolean, determines whether or not the route should activate or be cancelled. If a string, causes a redirect to the specified route. Can also be a promise for either of these value types.",
                "type": "Promise|Boolean|String"
            },
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src\\plugins\\js\\router.js",
            "line": 524,
            "description": "Parses a query string into an object.",
            "itemtype": "method",
            "name": "parseQueryString",
            "params": [
                {
                    "name": "queryString",
                    "description": "The query string to parse.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An object keyed according to the query string parameters.",
                "type": "Object"
            },
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src\\plugins\\js\\router.js",
            "line": 572,
            "description": "Add a route to be tested when the url fragment changes.",
            "itemtype": "method",
            "name": "route",
            "params": [
                {
                    "name": "routePattern",
                    "description": "The route pattern to test against.",
                    "type": "RegEx"
                },
                {
                    "name": "callback",
                    "description": "The callback to execute when the route pattern is matched.",
                    "type": "Function"
                }
            ],
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src\\plugins\\js\\router.js",
            "line": 582,
            "description": "Attempt to load the specified URL fragment. If a route succeeds with a match, returns `true`. If no defined routes matches the fragment, returns `false`.",
            "itemtype": "method",
            "name": "loadUrl",
            "params": [
                {
                    "name": "fragment",
                    "description": "The URL fragment to find a match for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if a match was found, false otherwise.",
                "type": "Boolean"
            },
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src\\plugins\\js\\router.js",
            "line": 659,
            "description": "Updates the document title based on the activated module instance, the routing instruction and the app.title.",
            "itemtype": "method",
            "name": "updateDocumentTitle",
            "params": [
                {
                    "name": "instance",
                    "description": "The activated module.",
                    "type": "Object"
                },
                {
                    "name": "instruction",
                    "description": "The routing instruction associated with the action. It has a `config` property that references the original route mapping config.",
                    "type": "Object"
                }
            ],
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src\\plugins\\js\\router.js",
            "line": 685,
            "description": "Save a fragment into the hash history, or replace the URL state if the\n'replace' option is passed. You are responsible for properly URL-encoding\nthe fragment in advance.\nThe options object can contain `trigger: false` if you wish to not have the\nroute callback be fired, or `replace: true`, if\nyou wish to modify the current URL without adding an entry to the history.",
            "itemtype": "method",
            "name": "navigate",
            "params": [
                {
                    "name": "fragment",
                    "description": "The url fragment to navigate to.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "An options object with optional trigger and replace flags. You can also pass a boolean directly to set the trigger option. Trigger is `true` by default.",
                    "type": "Object|boolean"
                }
            ],
            "return": {
                "description": "Returns true/false from loading the url.",
                "type": "Boolean"
            },
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src\\plugins\\js\\router.js",
            "line": 714,
            "description": "Navigates back in the browser history.",
            "itemtype": "method",
            "name": "navigateBack",
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src\\plugins\\js\\router.js",
            "line": 732,
            "description": "Converts a route to a hash suitable for binding to a link's href.",
            "itemtype": "method",
            "name": "convertRouteToHash",
            "params": [
                {
                    "name": "route",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The hash.",
                "type": "String"
            },
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src\\plugins\\js\\router.js",
            "line": 760,
            "description": "Converts a route to a module id. This is only called if no module id is supplied as part of the route mapping.",
            "itemtype": "method",
            "name": "convertRouteToModuleId",
            "params": [
                {
                    "name": "route",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The module id.",
                "type": "String"
            },
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src\\plugins\\js\\router.js",
            "line": 770,
            "description": "Converts a route to a displayable title. This is only called if no title is specified as part of the route mapping.",
            "itemtype": "method",
            "name": "convertRouteToTitle",
            "params": [
                {
                    "name": "route",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The title.",
                "type": "String"
            },
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src\\plugins\\js\\router.js",
            "line": 781,
            "description": "Maps route patterns to modules.",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "route",
                    "description": "A route, config or array of configs.",
                    "type": "String|object|object[]"
                },
                {
                    "name": "config",
                    "description": "The config for the specified route.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n        router.map([\n        { route: '', title:'Home', moduleId: 'homeScreen', nav: true },\n        { route: 'customer/:id', moduleId: 'customerDetails'}\n        ]);"
            ],
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src\\plugins\\js\\router.js",
            "line": 817,
            "description": "Builds an observable array designed to bind a navigation UI to. The model will exist in the `navigationModel` property.",
            "itemtype": "method",
            "name": "buildNavigationModel",
            "params": [
                {
                    "name": "defaultOrder",
                    "description": "The default order to use for navigation visible routes that don't specify an order. The default is 100 and each successive route will be one more than that.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src\\plugins\\js\\router.js",
            "line": 845,
            "description": "Configures how the router will handle unknown routes.",
            "itemtype": "method",
            "name": "mapUnknownRoutes",
            "params": [
                {
                    "name": "config",
                    "description": "If not supplied, then the router will map routes to modules with the same name.\nIf a string is supplied, it represents the module id to route all unknown routes to.\nFinally, if config is a function, it will be called back with the route instruction containing the route info. The function can then modify the instruction by adding a moduleId and the router will take over from there.",
                    "type": "String|function",
                    "optional": true
                },
                {
                    "name": "replaceRoute",
                    "description": "If config is a module id, then you can optionally provide a route to replace the url with.",
                    "type": "String",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src\\plugins\\js\\router.js",
            "line": 902,
            "description": "Resets the router by removing handlers, routes, event handlers and previously configured options.",
            "itemtype": "method",
            "name": "reset",
            "chainable": 1,
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src\\plugins\\js\\router.js",
            "line": 916,
            "description": "Makes all configured routes and/or module ids relative to a certain base url.",
            "itemtype": "method",
            "name": "makeRelative",
            "params": [
                {
                    "name": "settings",
                    "description": "If string, the value is used as the base for routes and module ids. If an object, you can specify `route` and `moduleId` separately. In place of specifying route, you can set `fromParent:true` to make routes automatically relative to the parent router's active route.",
                    "type": "String|object"
                }
            ],
            "chainable": 1,
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src\\plugins\\js\\router.js",
            "line": 982,
            "description": "Creates a child router.",
            "itemtype": "method",
            "name": "createChildRouter",
            "return": {
                "description": "The child router.",
                "type": "Router"
            },
            "class": "Router",
            "module": "router"
        },
        {
            "file": "src\\plugins\\js\\router.js",
            "line": 1005,
            "description": "Makes the RegExp generated for routes case sensitive, rather than the default of case insensitive.",
            "itemtype": "method",
            "name": "makeRoutesCaseSensitive",
            "class": "RouterModule",
            "module": "router"
        },
        {
            "file": "src\\plugins\\js\\router.js",
            "line": 1013,
            "description": "Verify that the target is the current window",
            "itemtype": "method",
            "name": "targetIsThisWindow",
            "return": {
                "description": "True if the event's target is the current window, false otherwise.",
                "type": "Boolean"
            },
            "class": "RouterModule",
            "module": "router"
        },
        {
            "file": "src\\plugins\\js\\router.js",
            "line": 1029,
            "description": "Activates the router and the underlying history tracking mechanism.",
            "itemtype": "method",
            "name": "activate",
            "return": {
                "description": "A promise that resolves when the router is ready.",
                "type": "Promise"
            },
            "class": "RouterModule",
            "module": "router"
        },
        {
            "file": "src\\plugins\\js\\router.js",
            "line": 1089,
            "description": "Deactivate current items and turn history listening off.",
            "itemtype": "method",
            "name": "deactivate",
            "class": "RouterModule",
            "module": "router"
        },
        {
            "file": "src\\plugins\\js\\router.js",
            "line": 1098,
            "description": "Installs the router's custom ko binding handler.",
            "itemtype": "method",
            "name": "install",
            "class": "RouterModule",
            "module": "router"
        },
        {
            "file": "src\\plugins\\js\\serializer.js",
            "line": 12,
            "description": "The name of the attribute that the serializer should use to identify an object's type.",
            "itemtype": "property",
            "name": "typeAttribute",
            "type": "String",
            "default": "type",
            "class": "SerializerModule",
            "module": "serializer"
        },
        {
            "file": "src\\plugins\\js\\serializer.js",
            "line": 18,
            "description": "The amount of space to use for indentation when writing out JSON.",
            "itemtype": "property",
            "name": "space",
            "type": "String|number",
            "default": "undefined",
            "class": "SerializerModule",
            "module": "serializer"
        },
        {
            "file": "src\\plugins\\js\\serializer.js",
            "line": 24,
            "description": "The default replacer function used during serialization. By default properties starting with '_' or '$' are removed from the serialized object.",
            "itemtype": "method",
            "name": "replacer",
            "params": [
                {
                    "name": "key",
                    "description": "The object key to check.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The object value to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The value to serialize.",
                "type": "Object"
            },
            "class": "SerializerModule",
            "module": "serializer"
        },
        {
            "file": "src\\plugins\\js\\serializer.js",
            "line": 41,
            "description": "Serializes the object.",
            "itemtype": "method",
            "name": "serialize",
            "params": [
                {
                    "name": "object",
                    "description": "The object to serialize.",
                    "type": "Object"
                },
                {
                    "name": "settings",
                    "description": "Settings can specify a replacer or space to override the serializer defaults.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The JSON string.",
                "type": "String"
            },
            "class": "SerializerModule",
            "module": "serializer"
        },
        {
            "file": "src\\plugins\\js\\serializer.js",
            "line": 57,
            "description": "Gets the type id for an object instance, using the configured `typeAttribute`.",
            "itemtype": "method",
            "name": "getTypeId",
            "params": [
                {
                    "name": "object",
                    "description": "The object to serialize.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The type.",
                "type": "String"
            },
            "class": "SerializerModule",
            "module": "serializer"
        },
        {
            "file": "src\\plugins\\js\\serializer.js",
            "line": 70,
            "description": "Maps type ids to object constructor functions. Keys are type ids and values are functions.",
            "itemtype": "property",
            "name": "typeMap.",
            "type": "Object",
            "class": "SerializerModule",
            "module": "serializer"
        },
        {
            "file": "src\\plugins\\js\\serializer.js",
            "line": 75,
            "description": "Adds a type id/constructor function mampping to the `typeMap`.",
            "itemtype": "method",
            "name": "registerType",
            "params": [
                {
                    "name": "typeId",
                    "description": "The type id.",
                    "type": "String"
                },
                {
                    "name": "constructor",
                    "description": "The constructor.",
                    "type": "Function"
                }
            ],
            "class": "SerializerModule",
            "module": "serializer"
        },
        {
            "file": "src\\plugins\\js\\serializer.js",
            "line": 91,
            "description": "The default reviver function used during deserialization. By default is detects type properties on objects and uses them to re-construct the correct object using the provided constructor mapping.",
            "itemtype": "method",
            "name": "reviver",
            "params": [
                {
                    "name": "key",
                    "description": "The attribute key.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The object value associated with the key.",
                    "type": "Object"
                },
                {
                    "name": "getTypeId",
                    "description": "A custom function used to get the type id from a value.",
                    "type": "Function"
                },
                {
                    "name": "getConstructor",
                    "description": "A custom function used to get the constructor function associated with a type id.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The value.",
                "type": "Object"
            },
            "class": "SerializerModule",
            "module": "serializer"
        },
        {
            "file": "src\\plugins\\js\\serializer.js",
            "line": 115,
            "description": "Deserialize the JSON.",
            "itemtype": "method",
            "name": "deserialize",
            "params": [
                {
                    "name": "text",
                    "description": "The JSON string.",
                    "type": "String"
                },
                {
                    "name": "settings",
                    "description": "Settings can specify a reviver, getTypeId function or getConstructor function.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The deserialized object.",
                "type": "Object"
            },
            "class": "SerializerModule",
            "module": "serializer"
        },
        {
            "file": "src\\plugins\\js\\serializer.js",
            "line": 132,
            "description": "Clone the object.",
            "itemtype": "method",
            "name": "clone",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to clone.",
                    "type": "Object"
                },
                {
                    "name": "settings",
                    "description": "Settings can specify any of the options allowed by the serialize or deserialize methods.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The new clone.",
                "type": "Object"
            },
            "class": "SerializerModule",
            "module": "serializer"
        },
        {
            "file": "src\\plugins\\js\\widget.js",
            "line": 52,
            "description": "Creates a ko binding handler for the specified kind.",
            "itemtype": "method",
            "name": "registerKind",
            "params": [
                {
                    "name": "kind",
                    "description": "The kind to create a custom binding handler for.",
                    "type": "String"
                }
            ],
            "class": "WidgetModule",
            "module": "widget"
        },
        {
            "file": "src\\plugins\\js\\widget.js",
            "line": 73,
            "description": "Maps views and module to the kind identifier if a non-standard pattern is desired.",
            "itemtype": "method",
            "name": "mapKind",
            "params": [
                {
                    "name": "kind",
                    "description": "The kind name.",
                    "type": "String"
                },
                {
                    "name": "viewId",
                    "description": "The unconventional view id to map the kind to.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "moduleId",
                    "description": "The unconventional module id to map the kind to.",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "WidgetModule",
            "module": "widget"
        },
        {
            "file": "src\\plugins\\js\\widget.js",
            "line": 89,
            "description": "Maps a kind name to it's module id. First it looks up a custom mapped kind, then falls back to `convertKindToModulePath`.",
            "itemtype": "method",
            "name": "mapKindToModuleId",
            "params": [
                {
                    "name": "kind",
                    "description": "The kind name.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The module id.",
                "type": "String"
            },
            "class": "WidgetModule",
            "module": "widget"
        },
        {
            "file": "src\\plugins\\js\\widget.js",
            "line": 98,
            "description": "Converts a kind name to it's module path. Used to conventionally map kinds who aren't explicitly mapped through `mapKind`.",
            "itemtype": "method",
            "name": "convertKindToModulePath",
            "params": [
                {
                    "name": "kind",
                    "description": "The kind name.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The module path.",
                "type": "String"
            },
            "class": "WidgetModule",
            "module": "widget"
        },
        {
            "file": "src\\plugins\\js\\widget.js",
            "line": 107,
            "description": "Maps a kind name to it's view id. First it looks up a custom mapped kind, then falls back to `convertKindToViewPath`.",
            "itemtype": "method",
            "name": "mapKindToViewId",
            "params": [
                {
                    "name": "kind",
                    "description": "The kind name.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The view id.",
                "type": "String"
            },
            "class": "WidgetModule",
            "module": "widget"
        },
        {
            "file": "src\\plugins\\js\\widget.js",
            "line": 116,
            "description": "Converts a kind name to it's view id. Used to conventionally map kinds who aren't explicitly mapped through `mapKind`.",
            "itemtype": "method",
            "name": "convertKindToViewPath",
            "params": [
                {
                    "name": "kind",
                    "description": "The kind name.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The view id.",
                "type": "String"
            },
            "class": "WidgetModule",
            "module": "widget"
        },
        {
            "file": "src\\plugins\\js\\widget.js",
            "line": 141,
            "description": "Creates a widget.",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "element",
                    "description": "The DOMElement or knockout virtual element that serves as the target element for the widget.",
                    "type": "DOMElement"
                },
                {
                    "name": "settings",
                    "description": "The widget settings.",
                    "type": "Object"
                },
                {
                    "name": "bindingContext",
                    "description": "The current binding context.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "WidgetModule",
            "module": "widget"
        },
        {
            "file": "src\\plugins\\js\\widget.js",
            "line": 157,
            "description": "Installs the widget module by adding the widget binding handler and optionally registering kinds.",
            "itemtype": "method",
            "name": "install",
            "params": [
                {
                    "name": "config",
                    "description": "The module config. Add a `kinds` array with the names of widgets to automatically register. You can also specify a `bindingName` if you wish to use another name for the widget binding, such as \"control\" for example.",
                    "type": "Object"
                }
            ],
            "class": "WidgetModule",
            "module": "widget"
        }
    ],
    "warnings": []
}